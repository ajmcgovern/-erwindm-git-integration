
CREATE TYPE [AccountNumber]
	FROM NVARCHAR(15) NULL
go

CREATE TYPE [Flag]
	FROM BIT NOT NULL
go

CREATE TYPE [NameStyle]
	FROM BIT NOT NULL
go

CREATE TYPE [Name]
	FROM NVARCHAR(50) NULL
go

CREATE TYPE [OrderNumber]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Phone]
	FROM NVARCHAR(25) NULL
go

CREATE TABLE [Address]
( 
	[AddressID]          int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[AddressLine1]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AddressLine2]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[City]               nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[PostalCode]         nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SpatialLocation]    geography  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Address_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Address_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [AddressType]
( 
	[AddressTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_AddressType_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_AddressType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BillOfMaterials]
( 
	[BillOfMaterialsID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductAssemblyID]  int  NULL ,
	[ComponentID]        int  NOT NULL ,
	[StartDate]          datetime  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_StartDate]
		 DEFAULT  getdate(),
	[EndDate]            datetime  NULL ,
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[BOMLevel]           smallint  NOT NULL ,
	[PerAssemblyQty]     decimal(8,2)  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_PerAssemblyQty]
		 DEFAULT  1.00,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [BillOfMaterials]
	 WITH CHECK ADD CONSTRAINT [CK_BillOfMaterials_PerAssembly] CHECK  ( PerAssemblyQty >= 1.00 )
go

CREATE TABLE [BusinessEntity]
( 
	[BusinessEntityID]   int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AddressID]          int  NOT NULL ,
	[AddressTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityContact]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonID]           int  NOT NULL ,
	[ContactTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ContactType]
( 
	[ContactTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ContactType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegion]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegion_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegionCurrency]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegionCurrency_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CreditCard]
( 
	[CreditCardID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[CardType]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CardNumber]         nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ExpMonth]           tinyint  NOT NULL ,
	[ExpYear]            smallint  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CreditCard_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Culture]
( 
	[CultureID]          nchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Culture_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Currency]
( 
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Currency_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CurrencyRate]
( 
	[CurrencyRateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[CurrencyRateDate]   datetime  NOT NULL ,
	[FromCurrencyCode]   nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ToCurrencyCode]     nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AverageRate]        money  NOT NULL ,
	[EndOfDayRate]       money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CurrencyRate_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Customer]
( 
	[CustomerID]         int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[PersonID]           int  NULL ,
	[StoreID]            int  NULL ,
	[TerritoryID]        int  NULL ,
	[AccountNumber]      AS (isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),'')) COLLATE SQL_Latin1_General_CP1_CI_AS ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Customer_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Customer_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Department]
( 
	[DepartmentID]       smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[GroupName]          [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Department_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Document]
( 
	[DocumentNode]       hierarchyid  NOT NULL ,
	[DocumentLevel]      AS ([DocumentNode].[GetLevel]()) ,
	[Title]              nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Owner]              int  NOT NULL ,
	[FolderFlag]         bit  NOT NULL 
	CONSTRAINT [DF_Document_FolderFlag]
		 DEFAULT  0,
	[FileName]           nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[FileExtension]      nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Revision]           nchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ChangeNumber]       int  NOT NULL 
	CONSTRAINT [DF_Document_ChangeNumber]
		 DEFAULT  0,
	[Status]             tinyint  NOT NULL ,
	[DocumentSummary]    nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Document]           varbinary(max)  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Document_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Document_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Document]
	 WITH CHECK ADD CONSTRAINT [CK_Document_Status] CHECK  ( Status BETWEEN 1 AND 3 )
go

CREATE TABLE [EmailAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[EmailAddressID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_EmailAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmailAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Employee]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[NationalIDNumber]   nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[LoginID]            nvarchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[OrganizationNode]   hierarchyid  NULL ,
	[OrganizationLevel]  AS ([OrganizationNode].[GetLevel]()) ,
	[JobTitle]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[BirthDate]          date  NOT NULL ,
	[MaritalStatus]      nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Gender]             nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[HireDate]           date  NOT NULL ,
	[SalariedFlag]       [Flag]  NOT NULL 
	CONSTRAINT [DF_Employee_SalariedFlag]
		 DEFAULT  1,
	[VacationHours]      smallint  NOT NULL 
	CONSTRAINT [DF_Employee_VacationHours]
		 DEFAULT  0,
	[SickLeaveHours]     smallint  NOT NULL 
	CONSTRAINT [DF_Employee_SickLeaveHours]
		 DEFAULT  0,
	[CurrentFlag]        [Flag]  NOT NULL 
	CONSTRAINT [DF_Employee_CurrentFlag]
		 DEFAULT  1,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Employee_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Employee_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_BirthDate] CHECK  ( BirthDate BETWEEN '1930-01-01' AND 'dateadd(year,(-18),getdate' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_MaritalStatus] CHECK  ( [MaritalStatus]='S' OR [MaritalStatus]='M' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_Gender] CHECK  ( [Gender]='F' OR [Gender]='M' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_HireDate] CHECK  ( HireDate BETWEEN '1996-07-01' AND 'dateadd(day,(1),getdate' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_VacationHours] CHECK  ( VacationHours BETWEEN -40 AND 240 )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_SickLeaveHours] CHECK  ( SickLeaveHours BETWEEN 0 AND 120 )
go

CREATE TABLE [EmployeeDepartmentHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[DepartmentID]       smallint  NOT NULL ,
	[ShiftID]            tinyint  NOT NULL ,
	[StartDate]          date  NOT NULL ,
	[EndDate]            date  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmployeeDepartmentHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [EmployeePayHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[RateChangeDate]     datetime  NOT NULL ,
	[Rate]               money  NOT NULL ,
	[PayFrequency]       tinyint  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmployeePayHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [EmployeePayHistory]
	 WITH CHECK ADD CONSTRAINT [CK_EmployeePayHistory_Rate] CHECK  ( Rate BETWEEN 6.50 AND 200.00 )
go

ALTER TABLE [EmployeePayHistory]
	 WITH CHECK ADD CONSTRAINT [CK_EmployeePayHistory_PayFrequ] CHECK  ( [PayFrequency]=2 OR [PayFrequency]=1 )
go

CREATE TABLE [Illustration]
( 
	[IllustrationID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Diagram]            xml  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Illustration_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [JobCandidate]
( 
	[JobCandidateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[BusinessEntityID]   int  NULL ,
	[Resume]             xml ( CONTENT [HRResumeSchemaCollection] ) NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_JobCandidate_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Location]
( 
	[LocationID]         smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CostRate]           smallmoney  NOT NULL 
	CONSTRAINT [DF_Location_CostRate]
		 DEFAULT  0.00,
	[Availability]       decimal(8,2)  NOT NULL 
	CONSTRAINT [DF_Location_Availability]
		 DEFAULT  0.00,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Location_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Location]
	 WITH CHECK ADD CONSTRAINT [CK_Location_CostRate] CHECK  ( CostRate >= 0.00 )
go

ALTER TABLE [Location]
	 WITH CHECK ADD CONSTRAINT [CK_Location_Availability] CHECK  ( Availability >= 0.00 )
go

CREATE TABLE [Password]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PasswordHash]       varchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[PasswordSalt]       varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Password_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Password_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Person]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonType]         nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[NameStyle]          [NameStyle]  NOT NULL 
	CONSTRAINT [DF_Person_NameStyle]
		 DEFAULT  0,
	[Title]              nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[FirstName]          [Name]  NOT NULL ,
	[MiddleName]         [Name]  NULL ,
	[LastName]           [Name]  NOT NULL ,
	[Suffix]             nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[EmailPromotion]     int  NOT NULL 
	CONSTRAINT [DF_Person_EmailPromotion]
		 DEFAULT  0,
	[AdditionalContactInfo] xml ( CONTENT [AdditionalContactInfoSchemaCollection] ) NULL ,
	[Demographics]       xml ( CONTENT [IndividualSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Person_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Person_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_PersonType] CHECK  ( [PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC') )
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_EmailPromotion] CHECK  ( EmailPromotion BETWEEN 0 AND 2 )
go

CREATE TABLE [PersonCreditCard]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[CreditCardID]       int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonCreditCard_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PersonPhone]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PhoneNumber]        [Phone]  NOT NULL ,
	[PhoneNumberTypeID]  int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonPhone_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PhoneNumberType]
( 
	[PhoneNumberTypeID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PhoneNumberType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Product]
( 
	[ProductID]          int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ProductNumber]      nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[MakeFlag]           [Flag]  NOT NULL 
	CONSTRAINT [DF_Product_MakeFlag]
		 DEFAULT  1,
	[FinishedGoodsFlag]  [Flag]  NOT NULL 
	CONSTRAINT [DF_Product_FinishedGoodsFlag]
		 DEFAULT  1,
	[Color]              nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[SafetyStockLevel]   smallint  NOT NULL ,
	[ReorderPoint]       smallint  NOT NULL ,
	[StandardCost]       money  NOT NULL ,
	[ListPrice]          money  NOT NULL ,
	[Size]               nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[SizeUnitMeasureCode] nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[WeightUnitMeasureCode] nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Weight]             decimal(8,2)  NULL ,
	[DaysToManufacture]  int  NOT NULL ,
	[ProductLine]        nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Class]              nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Style]              nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ProductSubcategoryID] int  NULL ,
	[ProductModelID]     int  NULL ,
	[SellStartDate]      datetime  NOT NULL ,
	[SellEndDate]        datetime  NULL ,
	[DiscontinuedDate]   datetime  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Product_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Product_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_SafetyStockLevel] CHECK  ( [SafetyStockLevel]>(0) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ReorderPoint] CHECK  ( [ReorderPoint]>(0) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_StandardCost] CHECK  ( StandardCost >= 0.00 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ListPrice] CHECK  ( ListPrice >= 0.00 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Weight] CHECK  ( [Weight]>(0.00) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_DaysToManufacture] CHECK  ( DaysToManufacture >= 0 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ProductLine] CHECK  ( upper([ProductLine])='R' OR upper([ProductLine])='M' OR upper([ProductLine])='T' OR upper([ProductLine])='S' OR [ProductLine] IS NULL )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Class] CHECK  ( upper([Class])='H' OR upper([Class])='M' OR upper([Class])='L' OR [Class] IS NULL )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Style] CHECK  ( upper([Style])='U' OR upper([Style])='M' OR upper([Style])='W' OR [Style] IS NULL )
go

CREATE TABLE [ProductCategory]
( 
	[ProductCategoryID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductCategory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductCategory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductCostHistory]
( 
	[ProductID]          int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[StandardCost]       money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductCostHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductCostHistory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductCostHistory_Standard] CHECK  ( StandardCost >= 0.00 )
go

CREATE TABLE [ProductDescription]
( 
	[ProductDescriptionID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[Description]        nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductDescription_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductDescription_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductDocument]
( 
	[ProductID]          int  NOT NULL ,
	[DocumentNode]       hierarchyid  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductDocument_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductInventory]
( 
	[ProductID]          int  NOT NULL ,
	[LocationID]         smallint  NOT NULL ,
	[Shelf]              nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Bin]                tinyint  NOT NULL ,
	[Quantity]           smallint  NOT NULL 
	CONSTRAINT [DF_ProductInventory_Quantity]
		 DEFAULT  0,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductInventory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductInventory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductInventory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductInventory_Shelf] CHECK  ( [Shelf] like '[A-Za-z]' OR [Shelf]='N/A' )
go

ALTER TABLE [ProductInventory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductInventory_Bin] CHECK  ( Bin BETWEEN 0 AND 100 )
go

CREATE TABLE [ProductListPriceHistory]
( 
	[ProductID]          int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[ListPrice]          money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductListPriceHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductListPriceHistory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductListPriceHistory_Lis] CHECK  ( [ListPrice]>(0.00) )
go

CREATE TABLE [ProductModel]
( 
	[ProductModelID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CatalogDescription] xml ( CONTENT [ProductDescriptionSchemaCollection] ) NULL ,
	[Instructions]       xml ( CONTENT [ManuInstructionsSchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductModel_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModel_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductModelIllustration]
( 
	[ProductModelID]     int  NOT NULL ,
	[IllustrationID]     int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModelIllustration_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductModelProductDescription]
( 
	[ProductModelID]     int  NOT NULL ,
	[ProductDescriptionID] int  NOT NULL ,
	[CultureID]          nchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModelProductDescriptionCulture_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductPhoto]
( 
	[ProductPhotoID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[ThumbNailPhoto]     varbinary(max)  NULL ,
	[ThumbnailPhotoFileName] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[LargePhoto]         varbinary(max)  NULL ,
	[LargePhotoFileName] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductPhoto_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductProductPhoto]
( 
	[ProductID]          int  NOT NULL ,
	[ProductPhotoID]     int  NOT NULL ,
	[Primary]            [Flag]  NOT NULL 
	CONSTRAINT [DF_ProductProductPhoto_Primary]
		 DEFAULT  0,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductProductPhoto_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductReview]
( 
	[ProductReviewID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReviewerName]       [Name]  NOT NULL ,
	[ReviewDate]         datetime  NOT NULL 
	CONSTRAINT [DF_ProductReview_ReviewDate]
		 DEFAULT  getdate(),
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Rating]             int  NOT NULL ,
	[Comments]           nvarchar(3850) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductReview_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductReview]
	 WITH CHECK ADD CONSTRAINT [CK_ProductReview_Rating] CHECK  ( Rating BETWEEN 1 AND 5 )
go

CREATE TABLE [ProductSubcategory]
( 
	[ProductSubcategoryID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductCategoryID]  int  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductSubcategory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductSubcategory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductVendor]
( 
	[ProductID]          int  NOT NULL ,
	[BusinessEntityID]   int  NOT NULL ,
	[AverageLeadTime]    int  NOT NULL ,
	[StandardPrice]      money  NOT NULL ,
	[LastReceiptCost]    money  NULL ,
	[LastReceiptDate]    datetime  NULL ,
	[MinOrderQty]        int  NOT NULL ,
	[MaxOrderQty]        int  NOT NULL ,
	[OnOrderQty]         int  NULL ,
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductVendor_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_AverageLeadTi] CHECK  ( AverageLeadTime >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_StandardPrice] CHECK  ( [StandardPrice]>(0.00) )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_LastReceiptCo] CHECK  ( [LastReceiptCost]>(0.00) )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_MinOrderQty] CHECK  ( MinOrderQty >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_MaxOrderQty] CHECK  ( MaxOrderQty >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_OnOrderQty] CHECK  ( OnOrderQty >= 0 )
go

CREATE TABLE [PurchaseOrderDetail]
( 
	[PurchaseOrderID]    int  NOT NULL ,
	[PurchaseOrderDetailID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[DueDate]            datetime  NOT NULL ,
	[OrderQty]           smallint  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[UnitPrice]          money  NOT NULL ,
	[LineTotal]          AS (isnull([OrderQty]*[UnitPrice],(0.00))) ,
	[ReceivedQty]        decimal(8,2)  NOT NULL ,
	[RejectedQty]        decimal(8,2)  NOT NULL ,
	[StockedQty]         AS (isnull([ReceivedQty]-[RejectedQty],(0.00))) ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderDetail_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_OrderQt] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_UnitPri] CHECK  ( UnitPrice >= 0.00 )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_Receive] CHECK  ( ReceivedQty >= 0.00 )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_Rejecte] CHECK  ( RejectedQty >= 0.00 )
go

CREATE TABLE [PurchaseOrderHeader]
( 
	[PurchaseOrderID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[RevisionNumber]     tinyint  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_RevisionNumber]
		 DEFAULT  0,
	[Status]             tinyint  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_Status]
		 DEFAULT  1,
	[EmployeeID]         int  NOT NULL ,
	[VendorID]           int  NOT NULL ,
	[ShipMethodID]       int  NOT NULL ,
	[OrderDate]          datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_OrderDate]
		 DEFAULT  getdate(),
	[ShipDate]           datetime  NULL ,
	[SubTotal]           money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_SubTotal]
		 DEFAULT  0.00,
	[TaxAmt]             money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_TaxAmt]
		 DEFAULT  0.00,
	[Freight]            money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_Freight]
		 DEFAULT  0.00,
	[TotalDue]           AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))) PERSISTED NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_Status] CHECK  ( Status BETWEEN 1 AND 4 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_SubTota] CHECK  ( SubTotal >= 0.00 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_TaxAmt] CHECK  ( TaxAmt >= 0.00 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_Freight] CHECK  ( Freight >= 0.00 )
go

CREATE TABLE [SalesOrderDetail]
( 
	[SalesOrderID]       int  NOT NULL ,
	[SalesOrderDetailID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[CarrierTrackingNumber] nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[OrderQty]           smallint  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[SpecialOfferID]     int  NOT NULL ,
	[UnitPrice]          money  NOT NULL ,
	[UnitPriceDiscount]  money  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_UnitPriceDiscount]
		 DEFAULT  0.0,
	[LineTotal]          AS (isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0))) ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_UnitPrice] CHECK  ( UnitPrice >= 0.00 )
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_UnitPriceD] CHECK  ( UnitPriceDiscount >= 0.00 )
go

CREATE TABLE [SalesOrderHeader]
( 
	[SalesOrderID]       int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[RevisionNumber]     tinyint  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_RevisionNumber]
		 DEFAULT  0,
	[OrderDate]          datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_OrderDate]
		 DEFAULT  getdate(),
	[DueDate]            datetime  NOT NULL ,
	[ShipDate]           datetime  NULL ,
	[Status]             tinyint  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_Status]
		 DEFAULT  1,
	[OnlineOrderFlag]    [Flag]  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_OnlineOrderFlag]
		 DEFAULT  1,
	[SalesOrderNumber]   AS (isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***')) COLLATE SQL_Latin1_General_CP1_CI_AS ,
	[PurchaseOrderNumber] [OrderNumber]  NULL ,
	[AccountNumber]      [AccountNumber]  NULL ,
	[CustomerID]         int  NOT NULL ,
	[SalesPersonID]      int  NULL ,
	[TerritoryID]        int  NULL ,
	[BillToAddressID]    int  NOT NULL ,
	[ShipToAddressID]    int  NOT NULL ,
	[ShipMethodID]       int  NOT NULL ,
	[CreditCardID]       int  NULL ,
	[CreditCardApprovalCode] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[CurrencyRateID]     int  NULL ,
	[SubTotal]           money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_SubTotal]
		 DEFAULT  0.00,
	[TaxAmt]             money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_TaxAmt]
		 DEFAULT  0.00,
	[Freight]            money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_Freight]
		 DEFAULT  0.00,
	[TotalDue]           AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))) ,
	[Comment]            nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_Status] CHECK  ( Status BETWEEN 0 AND 8 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_SubTotal] CHECK  ( SubTotal >= 0.00 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_TaxAmt] CHECK  ( TaxAmt >= 0.00 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_Freight] CHECK  ( Freight >= 0.00 )
go

CREATE TABLE [SalesOrderHeaderSalesReason]
( 
	[SalesOrderID]       int  NOT NULL ,
	[SalesReasonID]      int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeaderSalesReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesPerson]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[TerritoryID]        int  NULL ,
	[SalesQuota]         money  NULL ,
	[Bonus]              money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_Bonus]
		 DEFAULT  0.00,
	[CommissionPct]      smallmoney  NOT NULL 
	CONSTRAINT [DF_SalesPerson_CommissionPct]
		 DEFAULT  0.00,
	[SalesYTD]           money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_SalesYTD]
		 DEFAULT  0.00,
	[SalesLastYear]      money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_SalesLastYear]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesPerson_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesPerson_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesQuota] CHECK  ( [SalesQuota]>(0.00) )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_Bonus] CHECK  ( Bonus >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_CommissionPct] CHECK  ( CommissionPct >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesYTD] CHECK  ( SalesYTD >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesLastYear] CHECK  ( SalesLastYear >= 0.00 )
go

CREATE TABLE [SalesPersonQuotaHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[QuotaDate]          datetime  NOT NULL ,
	[SalesQuota]         money  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesPersonQuotaHistory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesPersonQuotaHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesPersonQuotaHistory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPersonQuotaHistory_Sal] CHECK  ( [SalesQuota]>(0.00) )
go

CREATE TABLE [SalesReason]
( 
	[SalesReasonID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ReasonType]         [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesTaxRate]
( 
	[SalesTaxRateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[TaxType]            tinyint  NOT NULL ,
	[TaxRate]            smallmoney  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_TaxRate]
		 DEFAULT  0.00,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesTaxRate]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTaxRate_TaxType] CHECK  ( TaxType BETWEEN 1 AND 3 )
go

CREATE TABLE [SalesTerritory]
( 
	[TerritoryID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Group]              nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SalesYTD]           money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_SalesYTD]
		 DEFAULT  0.00,
	[SalesLastYear]      money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_SalesLastYear]
		 DEFAULT  0.00,
	[CostYTD]            money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_CostYTD]
		 DEFAULT  0.00,
	[CostLastYear]       money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_CostLastYear]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_SalesYTD] CHECK  ( SalesYTD >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_SalesLastYea] CHECK  ( SalesLastYear >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_CostYTD] CHECK  ( CostYTD >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_CostLastYear] CHECK  ( CostLastYear >= 0.00 )
go

CREATE TABLE [SalesTerritoryHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTerritoryHistory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTerritoryHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ScrapReason]
( 
	[ScrapReasonID]      smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ScrapReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Shift]
( 
	[ShiftID]            tinyint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[StartTime]          time(7)  NOT NULL ,
	[EndTime]            time(7)  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Shift_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ShipMethod]
( 
	[ShipMethodID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ShipBase]           money  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ShipBase]
		 DEFAULT  0.00,
	[ShipRate]           money  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ShipRate]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ShipMethod_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ShipMethod]
	 WITH CHECK ADD CONSTRAINT [CK_ShipMethod_ShipBase] CHECK  ( [ShipBase]>(0.00) )
go

ALTER TABLE [ShipMethod]
	 WITH CHECK ADD CONSTRAINT [CK_ShipMethod_ShipRate] CHECK  ( [ShipRate]>(0.00) )
go

CREATE TABLE [ShoppingCartItem]
( 
	[ShoppingCartItemID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[ShoppingCartID]     nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_Quantity]
		 DEFAULT  1,
	[ProductID]          int  NOT NULL ,
	[DateCreated]        datetime  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_DateCreated]
		 DEFAULT  getdate(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ShoppingCartItem]
	 WITH CHECK ADD CONSTRAINT [CK_ShoppingCartItem_Quantity] CHECK  ( Quantity >= 1 )
go

CREATE TABLE [SpecialOffer]
( 
	[SpecialOfferID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Description]        nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[DiscountPct]        smallmoney  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_DiscountPct]
		 DEFAULT  0.00,
	[Type]               nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Category]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NOT NULL ,
	[MinQty]             int  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_MinQty]
		 DEFAULT  0,
	[MaxQty]             int  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_DiscountPct] CHECK  ( DiscountPct >= 0.00 )
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_MinQty] CHECK  ( MinQty >= 0 )
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_MaxQty] CHECK  ( MaxQty >= 0 )
go

CREATE TABLE [SpecialOfferProduct]
( 
	[SpecialOfferID]     int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SpecialOfferProduct_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SpecialOfferProduct_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [StateProvince]
( 
	[StateProvinceID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceCode]  nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[IsOnlyStateProvinceFlag] [Flag]  NOT NULL 
	CONSTRAINT [DF_StateProvince_IsOnlyStateProvinceFlag]
		 DEFAULT  1,
	[Name]               [Name]  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_StateProvince_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_StateProvince_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Store]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[SalesPersonID]      int  NULL ,
	[Demographics]       xml ( CONTENT [StoreSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Store_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Store_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [TransactionHistory]
( 
	[TransactionID]      int  IDENTITY ( 100000,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReferenceOrderID]   int  NOT NULL ,
	[ReferenceOrderLineID] int  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_ReferenceOrderLineID]
		 DEFAULT  0,
	[TransactionDate]    datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_TransactionDate]
		 DEFAULT  getdate(),
	[TransactionType]    nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL ,
	[ActualCost]         money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [TransactionHistory]
	 WITH CHECK ADD CONSTRAINT [CK_TransactionHistory_Transact] CHECK  ( [TransactionType]='P' OR [TransactionType]='S' OR [TransactionType]='W' )
go

CREATE TABLE [TransactionHistoryArchive]
( 
	[TransactionID]      int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReferenceOrderID]   int  NOT NULL ,
	[ReferenceOrderLineID] int  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_ReferenceOrderLineID]
		 DEFAULT  0,
	[TransactionDate]    datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_TransactionDate]
		 DEFAULT  getdate(),
	[TransactionType]    nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL ,
	[ActualCost]         money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [TransactionHistoryArchive]
	 WITH CHECK ADD CONSTRAINT [CK_TransactionHistoryArchive_T] CHECK  ( [TransactionType]='P' OR [TransactionType]='S' OR [TransactionType]='W' )
go

CREATE TABLE [UnitMeasure]
( 
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_UnitMeasure_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Vendor]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AccountNumber]      [AccountNumber]  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CreditRating]       tinyint  NOT NULL ,
	[PreferredVendorStatus] [Flag]  NOT NULL 
	CONSTRAINT [DF_Vendor_PreferredVendorStatus]
		 DEFAULT  1,
	[ActiveFlag]         [Flag]  NOT NULL 
	CONSTRAINT [DF_Vendor_ActiveFlag]
		 DEFAULT  1,
	[PurchasingWebServiceURL] nvarchar(1024) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Vendor_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Vendor]
	 WITH CHECK ADD CONSTRAINT [CK_Vendor_CreditRating] CHECK  ( CreditRating BETWEEN 1 AND 5 )
go

CREATE TABLE [WorkOrder]
( 
	[WorkOrderID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[OrderQty]           int  NOT NULL ,
	[StockedQty]         AS (isnull([OrderQty]-[ScrappedQty],(0))) ,
	[ScrappedQty]        smallint  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[DueDate]            datetime  NOT NULL ,
	[ScrapReasonID]      smallint  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_WorkOrder_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [WorkOrder]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrder_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [WorkOrder]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrder_ScrappedQty] CHECK  ( ScrappedQty >= 0 )
go

CREATE TABLE [WorkOrderRouting]
( 
	[WorkOrderID]        int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[OperationSequence]  smallint  NOT NULL ,
	[LocationID]         smallint  NOT NULL ,
	[ScheduledStartDate] datetime  NOT NULL ,
	[ScheduledEndDate]   datetime  NOT NULL ,
	[ActualStartDate]    datetime  NULL ,
	[ActualEndDate]      datetime  NULL ,
	[ActualResourceHrs]  decimal(9,4)  NULL ,
	[PlannedCost]        money  NOT NULL ,
	[ActualCost]         money  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_WorkOrderRouting_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_ActualReso] CHECK  ( ActualResourceHrs >= 0.0000 )
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_PlannedCos] CHECK  ( [PlannedCost]>(0.00) )
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_ActualCost] CHECK  ( [ActualCost]>(0.00) )
go

ALTER TABLE [Address]
	ADD CONSTRAINT [PK_Address_AddressID] PRIMARY KEY  CLUSTERED ([AddressID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Address_rowguid] ON [Address]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [IX_Address_AddressLine1_Addres] ON [Address]
( 
	[AddressLine1]        ASC,
	[AddressLine2]        ASC,
	[City]                ASC,
	[StateProvinceID]     ASC,
	[PostalCode]          ASC
)
go

ALTER TABLE [AddressType]
	ADD CONSTRAINT [PK_AddressType_AddressTypeID] PRIMARY KEY  CLUSTERED ([AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_rowguid] ON [AddressType]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_Name] ON [AddressType]
( 
	[Name]                ASC
)
go

ALTER TABLE [BillOfMaterials]
	ADD CONSTRAINT [PK_BillOfMaterials_BillOfMater] PRIMARY KEY  NONCLUSTERED ([BillOfMaterialsID] ASC)
go

CREATE UNIQUE CLUSTERED INDEX [AK_BillOfMaterials_ProductAsse] ON [BillOfMaterials]
( 
	[ProductAssemblyID]   ASC,
	[ComponentID]         ASC,
	[StartDate]           ASC
)
go

ALTER TABLE [BusinessEntity]
	ADD CONSTRAINT [PK_BusinessEntity_BusinessEnti] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntity_rowguid] ON [BusinessEntity]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityAddress]
	ADD CONSTRAINT [PK_BusinessEntityAddress_Busin] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[AddressID] ASC,[AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityAddress_rowgu] ON [BusinessEntityAddress]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityContact]
	ADD CONSTRAINT [PK_BusinessEntityContact_Busin] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PersonID] ASC,[ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityContact_rowgu] ON [BusinessEntityContact]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ContactType]
	ADD CONSTRAINT [PK_ContactType_ContactTypeID] PRIMARY KEY  CLUSTERED ([ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ContactType_Name] ON [ContactType]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegion]
	ADD CONSTRAINT [PK_CountryRegion_CountryRegion] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CountryRegion_Name] ON [CountryRegion]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegionCurrency]
	ADD CONSTRAINT [PK_CountryRegionCurrency_Count] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC,[CurrencyCode] ASC)
go

ALTER TABLE [CreditCard]
	ADD CONSTRAINT [PK_CreditCard_CreditCardID] PRIMARY KEY  CLUSTERED ([CreditCardID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CreditCard_CardNumber] ON [CreditCard]
( 
	[CardNumber]          ASC
)
go

ALTER TABLE [Culture]
	ADD CONSTRAINT [PK_Culture_CultureID] PRIMARY KEY  CLUSTERED ([CultureID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Culture_Name] ON [Culture]
( 
	[Name]                ASC
)
go

ALTER TABLE [Currency]
	ADD CONSTRAINT [PK_Currency_CurrencyCode] PRIMARY KEY  CLUSTERED ([CurrencyCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Currency_Name] ON [Currency]
( 
	[Name]                ASC
)
go

ALTER TABLE [CurrencyRate]
	ADD CONSTRAINT [PK_CurrencyRate_CurrencyRateID] PRIMARY KEY  CLUSTERED ([CurrencyRateID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CurrencyRate_CurrencyRateDa] ON [CurrencyRate]
( 
	[CurrencyRateDate]    ASC,
	[FromCurrencyCode]    ASC,
	[ToCurrencyCode]      ASC
)
go

ALTER TABLE [Customer]
	ADD CONSTRAINT [PK_Customer_CustomerID] PRIMARY KEY  CLUSTERED ([CustomerID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Customer_rowguid] ON [Customer]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Customer_AccountNumber] ON [Customer]
( 
	[AccountNumber]       ASC
)
go

ALTER TABLE [Department]
	ADD CONSTRAINT [PK_Department_DepartmentID] PRIMARY KEY  CLUSTERED ([DepartmentID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Department_Name] ON [Department]
( 
	[Name]                ASC
)
go

ALTER TABLE [Document]
	ADD CONSTRAINT [PK_Document_DocumentNode] PRIMARY KEY  CLUSTERED ([DocumentNode] ASC)
go

ALTER TABLE [Document]
	ADD CONSTRAINT [UQ__Document__F73921F7C5112C2E] UNIQUE ([rowguid]  ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Document_DocumentLevel_Docu] ON [Document]
( 
	[DocumentLevel]       ASC,
	[DocumentNode]        ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Document_rowguid] ON [Document]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Document_FileName_Revision] ON [Document]
( 
	[FileName]            ASC,
	[Revision]            ASC
)
go

ALTER TABLE [EmailAddress]
	ADD CONSTRAINT [PK_EmailAddress_BusinessEntity] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[EmailAddressID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_EmailAddress_EmailAddress] ON [EmailAddress]
( 
	[EmailAddress]        ASC
)
go

ALTER TABLE [Employee]
	ADD CONSTRAINT [PK_Employee_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Employee_LoginID] ON [Employee]
( 
	[LoginID]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Employee_NationalIDNumber] ON [Employee]
( 
	[NationalIDNumber]    ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Employee_rowguid] ON [Employee]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Employee_OrganizationNode] ON [Employee]
( 
	[OrganizationNode]    ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Employee_OrganizationLevel_] ON [Employee]
( 
	[OrganizationLevel]   ASC,
	[OrganizationNode]    ASC
)
go

ALTER TABLE [EmployeeDepartmentHistory]
	ADD CONSTRAINT [PK_EmployeeDepartmentHistory_B] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[StartDate] ASC,[DepartmentID] ASC,[ShiftID] ASC)
go

ALTER TABLE [EmployeePayHistory]
	ADD CONSTRAINT [PK_EmployeePayHistory_Business] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[RateChangeDate] ASC)
go

ALTER TABLE [Illustration]
	ADD CONSTRAINT [PK_Illustration_IllustrationID] PRIMARY KEY  CLUSTERED ([IllustrationID] ASC)
go

ALTER TABLE [JobCandidate]
	ADD CONSTRAINT [PK_JobCandidate_JobCandidateID] PRIMARY KEY  CLUSTERED ([JobCandidateID] ASC)
go

ALTER TABLE [Location]
	ADD CONSTRAINT [PK_Location_LocationID] PRIMARY KEY  CLUSTERED ([LocationID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Location_Name] ON [Location]
( 
	[Name]                ASC
)
go

ALTER TABLE [Password]
	ADD CONSTRAINT [PK_Password_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

ALTER TABLE [Person]
	ADD CONSTRAINT [PK_Person_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Person_rowguid] ON [Person]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Person_LastName_FirstName_M] ON [Person]
( 
	[LastName]            ASC,
	[FirstName]           ASC,
	[MiddleName]          ASC
)
go

ALTER TABLE [PersonCreditCard]
	ADD CONSTRAINT [PK_PersonCreditCard_BusinessEn] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[CreditCardID] ASC)
go

ALTER TABLE [PersonPhone]
	ADD CONSTRAINT [PK_PersonPhone_BusinessEntityI] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PhoneNumber] ASC,[PhoneNumberTypeID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PersonPhone_PhoneNumber] ON [PersonPhone]
( 
	[PhoneNumber]         ASC
)
go

ALTER TABLE [PhoneNumberType]
	ADD CONSTRAINT [PK_PhoneNumberType_PhoneNumber] PRIMARY KEY  CLUSTERED ([PhoneNumberTypeID] ASC)
go

ALTER TABLE [Product]
	ADD CONSTRAINT [PK_Product_ProductID] PRIMARY KEY  CLUSTERED ([ProductID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_ProductNumber] ON [Product]
( 
	[ProductNumber]       ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_Name] ON [Product]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_rowguid] ON [Product]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductCategory]
	ADD CONSTRAINT [PK_ProductCategory_ProductCate] PRIMARY KEY  CLUSTERED ([ProductCategoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductCategory_Name] ON [ProductCategory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductCategory_rowguid] ON [ProductCategory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductCostHistory]
	ADD CONSTRAINT [PK_ProductCostHistory_ProductI] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[StartDate] ASC)
go

ALTER TABLE [ProductDescription]
	ADD CONSTRAINT [PK_ProductDescription_ProductD] PRIMARY KEY  CLUSTERED ([ProductDescriptionID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductDescription_rowguid] ON [ProductDescription]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductDocument]
	ADD CONSTRAINT [PK_ProductDocument_ProductID_D] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[DocumentNode] ASC)
go

ALTER TABLE [ProductInventory]
	ADD CONSTRAINT [PK_ProductInventory_ProductID_] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[LocationID] ASC)
go

ALTER TABLE [ProductListPriceHistory]
	ADD CONSTRAINT [PK_ProductListPriceHistory_Pro] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[StartDate] ASC)
go

ALTER TABLE [ProductModel]
	ADD CONSTRAINT [PK_ProductModel_ProductModelID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductModel_Name] ON [ProductModel]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductModel_rowguid] ON [ProductModel]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductModelIllustration]
	ADD CONSTRAINT [PK_ProductModelIllustration_Pr] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC,[IllustrationID] ASC)
go

ALTER TABLE [ProductModelProductDescription]
	ADD CONSTRAINT [PK_ProductModelProductDescript] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC,[ProductDescriptionID] ASC,[CultureID] ASC)
go

ALTER TABLE [ProductPhoto]
	ADD CONSTRAINT [PK_ProductPhoto_ProductPhotoID] PRIMARY KEY  CLUSTERED ([ProductPhotoID] ASC)
go

ALTER TABLE [ProductProductPhoto]
	ADD CONSTRAINT [PK_ProductProductPhoto_Product] PRIMARY KEY  NONCLUSTERED ([ProductID] ASC,[ProductPhotoID] ASC)
go

ALTER TABLE [ProductReview]
	ADD CONSTRAINT [PK_ProductReview_ProductReview] PRIMARY KEY  CLUSTERED ([ProductReviewID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_ProductReview_ProductID_Nam] ON [ProductReview]
( 
	[ProductID]           ASC,
	[ReviewerName]        ASC
)
INCLUDE( [Comments] )
go

ALTER TABLE [ProductSubcategory]
	ADD CONSTRAINT [PK_ProductSubcategory_ProductS] PRIMARY KEY  CLUSTERED ([ProductSubcategoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductSubcategory_Name] ON [ProductSubcategory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductSubcategory_rowguid] ON [ProductSubcategory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductVendor]
	ADD CONSTRAINT [PK_ProductVendor_ProductID_Bus] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[BusinessEntityID] ASC)
go

ALTER TABLE [PurchaseOrderDetail]
	ADD CONSTRAINT [PK_PurchaseOrderDetail_Purchas] PRIMARY KEY  CLUSTERED ([PurchaseOrderID] ASC,[PurchaseOrderDetailID] ASC)
go

ALTER TABLE [PurchaseOrderHeader]
	ADD CONSTRAINT [PK_PurchaseOrderHeader_Purchas] PRIMARY KEY  CLUSTERED ([PurchaseOrderID] ASC)
go

ALTER TABLE [SalesOrderDetail]
	ADD CONSTRAINT [PK_SalesOrderDetail_SalesOrder] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC,[SalesOrderDetailID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderDetail_rowguid] ON [SalesOrderDetail]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_SalesOrderDetail_ProductID] ON [SalesOrderDetail]
( 
	[ProductID]           ASC
)
go

ALTER TABLE [SalesOrderHeader]
	ADD CONSTRAINT [PK_SalesOrderHeader_SalesOrder] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderHeader_rowguid] ON [SalesOrderHeader]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderHeader_SalesOrder] ON [SalesOrderHeader]
( 
	[SalesOrderNumber]    ASC
)
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	ADD CONSTRAINT [PK_SalesOrderHeaderSalesReason] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC,[SalesReasonID] ASC)
go

ALTER TABLE [SalesPerson]
	ADD CONSTRAINT [PK_SalesPerson_BusinessEntityI] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesPerson_rowguid] ON [SalesPerson]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesPersonQuotaHistory]
	ADD CONSTRAINT [PK_SalesPersonQuotaHistory_Bus] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[QuotaDate] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesPersonQuotaHistory_row] ON [SalesPersonQuotaHistory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesReason]
	ADD CONSTRAINT [PK_SalesReason_SalesReasonID] PRIMARY KEY  CLUSTERED ([SalesReasonID] ASC)
go

ALTER TABLE [SalesTaxRate]
	ADD CONSTRAINT [PK_SalesTaxRate_SalesTaxRateID] PRIMARY KEY  CLUSTERED ([SalesTaxRateID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTaxRate_StateProvinceI] ON [SalesTaxRate]
( 
	[StateProvinceID]     ASC,
	[TaxType]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTaxRate_rowguid] ON [SalesTaxRate]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesTerritory]
	ADD CONSTRAINT [PK_SalesTerritory_TerritoryID] PRIMARY KEY  CLUSTERED ([TerritoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritory_Name] ON [SalesTerritory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritory_rowguid] ON [SalesTerritory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesTerritoryHistory]
	ADD CONSTRAINT [PK_SalesTerritoryHistory_Busin] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[StartDate] ASC,[TerritoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritoryHistory_rowgu] ON [SalesTerritoryHistory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ScrapReason]
	ADD CONSTRAINT [PK_ScrapReason_ScrapReasonID] PRIMARY KEY  CLUSTERED ([ScrapReasonID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ScrapReason_Name] ON [ScrapReason]
( 
	[Name]                ASC
)
go

ALTER TABLE [Shift]
	ADD CONSTRAINT [PK_Shift_ShiftID] PRIMARY KEY  CLUSTERED ([ShiftID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Shift_Name] ON [Shift]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Shift_StartTime_EndTime] ON [Shift]
( 
	[StartTime]           ASC,
	[EndTime]             ASC
)
go

ALTER TABLE [ShipMethod]
	ADD CONSTRAINT [PK_ShipMethod_ShipMethodID] PRIMARY KEY  CLUSTERED ([ShipMethodID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ShipMethod_Name] ON [ShipMethod]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ShipMethod_rowguid] ON [ShipMethod]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ShoppingCartItem]
	ADD CONSTRAINT [PK_ShoppingCartItem_ShoppingCa] PRIMARY KEY  CLUSTERED ([ShoppingCartItemID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_ShoppingCartItem_ShoppingCa] ON [ShoppingCartItem]
( 
	[ShoppingCartID]      ASC,
	[ProductID]           ASC
)
go

ALTER TABLE [SpecialOffer]
	ADD CONSTRAINT [PK_SpecialOffer_SpecialOfferID] PRIMARY KEY  CLUSTERED ([SpecialOfferID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SpecialOffer_rowguid] ON [SpecialOffer]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SpecialOfferProduct]
	ADD CONSTRAINT [PK_SpecialOfferProduct_Special] PRIMARY KEY  CLUSTERED ([SpecialOfferID] ASC,[ProductID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SpecialOfferProduct_rowguid] ON [SpecialOfferProduct]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [StateProvince]
	ADD CONSTRAINT [PK_StateProvince_StateProvince] PRIMARY KEY  CLUSTERED ([StateProvinceID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_Name] ON [StateProvince]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_StateProvince] ON [StateProvince]
( 
	[StateProvinceCode]   ASC,
	[CountryRegionCode]   ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_rowguid] ON [StateProvince]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [Store]
	ADD CONSTRAINT [PK_Store_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Store_rowguid] ON [Store]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [TransactionHistory]
	ADD CONSTRAINT [PK_TransactionHistory_Transact] PRIMARY KEY  CLUSTERED ([TransactionID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistory_Referenc] ON [TransactionHistory]
( 
	[ReferenceOrderID]    ASC,
	[ReferenceOrderLineID]  ASC
)
go

ALTER TABLE [TransactionHistoryArchive]
	ADD CONSTRAINT [PK_TransactionHistoryArchive_T] PRIMARY KEY  CLUSTERED ([TransactionID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistoryArchive_P] ON [TransactionHistoryArchive]
( 
	[ProductID]           ASC
)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistoryArchive_R] ON [TransactionHistoryArchive]
( 
	[ReferenceOrderID]    ASC,
	[ReferenceOrderLineID]  ASC
)
go

ALTER TABLE [UnitMeasure]
	ADD CONSTRAINT [PK_UnitMeasure_UnitMeasureCode] PRIMARY KEY  CLUSTERED ([UnitMeasureCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_UnitMeasure_Name] ON [UnitMeasure]
( 
	[Name]                ASC
)
go

ALTER TABLE [Vendor]
	ADD CONSTRAINT [PK_Vendor_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Vendor_AccountNumber] ON [Vendor]
( 
	[AccountNumber]       ASC
)
go

ALTER TABLE [WorkOrder]
	ADD CONSTRAINT [PK_WorkOrder_WorkOrderID] PRIMARY KEY  CLUSTERED ([WorkOrderID] ASC)
go

ALTER TABLE [WorkOrderRouting]
	ADD CONSTRAINT [PK_WorkOrderRouting_WorkOrderI] PRIMARY KEY  CLUSTERED ([WorkOrderID] ASC,[ProductID] ASC,[OperationSequence] ASC)
go

CREATE NONCLUSTERED INDEX [IX_WorkOrderRouting_ProductID] ON [WorkOrderRouting]
( 
	[ProductID]           ASC
)
go

CREATE VIEW [Person].[vAdditionalContactInfo] AS  SELECT [BusinessEntityID], [FirstName], [MiddleName], [LastName],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber)[1]/act:number' , 'nvarchar(50)' )  AS [TelephoneNumber],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [TelephoneSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes";
        (act:homePostalAddress/act:Street)[1]' , 'nvarchar(50)' )  AS [Street],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:City)[1]' , 'nvarchar(50)' )  AS [City],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:StateProvince)[1]' , 'nvarchar(50)' )  AS [StateProvince],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:PostalCode)[1]' , 'nvarchar(50)' )  AS [PostalCode],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:CountryRegion)[1]' , 'nvarchar(50)' )  AS [CountryRegion],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' )  AS [HomeAddressSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:eMailAddress)[1]' , 'nvarchar(128)' )  AS [EMailAddress],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [EMailSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/act:telephoneNumber/act:number)[1]' , 'nvarchar(50)' )  AS [EMailTelephoneNumber], [rowguid], [ModifiedDate] FROM Person.Person   OUTER APPLY   AdditionalContactInfo.nodes( 'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
    /ci:AdditionalContactInfo' ) AS ContactInfo 
(ref)
 WHERE [AdditionalContactInfo] IS NOT NULL
go

CREATE VIEW [HumanResources].[vEmployee] AS  SELECT e.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName], p.[AdditionalContactInfo] FROM HumanResources.Employee AS e   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.BusinessEntityID = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pp.[PhoneNumberTypeID] = pnt.[PhoneNumberTypeID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON p.[BusinessEntityID] = ea.[BusinessEntityID]
go

CREATE VIEW [HumanResources].[vEmployeeDepartment] AS  SELECT e.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], d.[Name] AS [Department], d.[GroupName], edh.[StartDate] FROM HumanResources.Employee AS e   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   HumanResources.EmployeeDepartmentHistory AS edh ON e.[BusinessEntityID] = edh.[BusinessEntityID]   INNER JOIN   HumanResources.Department AS d ON edh.[DepartmentID] = d.[DepartmentID] WHERE edh.EndDate IS NULL
go

CREATE VIEW [HumanResources].[vEmployeeDepartmentHistory] AS  SELECT e.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], s.[Name] AS [Shift], d.[Name] AS [Department], d.[GroupName], edh.[StartDate], edh.[EndDate] FROM HumanResources.Employee AS e   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   HumanResources.EmployeeDepartmentHistory AS edh ON e.[BusinessEntityID] = edh.[BusinessEntityID]   INNER JOIN   HumanResources.Department AS d ON edh.[DepartmentID] = d.[DepartmentID]   INNER JOIN   HumanResources.Shift AS s ON s.[ShiftID] = edh.[ShiftID]
go

CREATE VIEW [Sales].[vIndividualCustomer] AS  SELECT p.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.Name AS StateProvinceName, a.[PostalCode], cr.Name AS CountryRegionName, p.[Demographics] FROM Person.Person AS p   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = p.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]   INNER JOIN   Sales.Customer AS c ON c.[PersonID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID] WHERE c.StoreID IS NULL
go

CREATE VIEW [Sales].[vPersonDemographics] AS  SELECT p.[BusinessEntityID],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalPurchaseYTD[1]' , 'money' )  AS [TotalPurchaseYTD],  CONVERT(datetime,  REPLACE(  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        DateFirstPurchase[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [DateFirstPurchase],  CONVERT(datetime,  REPLACE(  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        BirthDate[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [BirthDate],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        MaritalStatus[1]' , 'nvarchar(1)' )  AS [MaritalStatus],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        YearlyIncome[1]' , 'nvarchar(30)' )  AS [YearlyIncome],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Gender[1]' , 'nvarchar(1)' )  AS [Gender],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalChildren[1]' , 'integer' )  AS [TotalChildren],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberChildrenAtHome[1]' , 'integer' )  AS [NumberChildrenAtHome],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Education[1]' , 'nvarchar(30)' )  AS [Education],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Occupation[1]' , 'nvarchar(30)' )  AS [Occupation],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        HomeOwnerFlag[1]' , 'bit' )  AS [HomeOwnerFlag],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberCarsOwned[1]' , 'integer' )  AS [NumberCarsOwned] FROM Person.Person AS p   CROSS APPLY   p.Demographics.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
    /IndividualSurvey' ) AS [IndividualSurvey] 
(ref)
 WHERE [Demographics] IS NOT NULL
go

CREATE VIEW [HumanResources].[vJobCandidate] AS  SELECT jc.[JobCandidateID], jc.[BusinessEntityID],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Prefix)[1]' , 'nvarchar(30)' )  AS [Name.Prefix],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume";
        (/Resume/Name/Name.First)[1]' , 'nvarchar(30)' )  AS [Name.First],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Middle)[1]' , 'nvarchar(30)' )  AS [Name.Middle],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Last)[1]' , 'nvarchar(30)' )  AS [Name.Last],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Suffix)[1]' , 'nvarchar(30)' )  AS [Name.Suffix],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Skills)[1]' , 'nvarchar(max)' )  AS [Skills],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Type)[1]' , 'nvarchar(30)' )  AS [Addr.Type],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.CountryRegion)[1]' , 'nvarchar(100)' )  AS [Addr.Loc.CountryRegion],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.State)[1]' , 'nvarchar(100)' )  AS [Addr.Loc.State],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.City)[1]' , 'nvarchar(100)' )  AS [Addr.Loc.City],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.PostalCode)[1]' , 'nvarchar(20)' )  AS [Addr.PostalCode],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/EMail)[1]' , 'nvarchar(max)' )  AS [EMail],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/WebSite)[1]' , 'nvarchar(max)' )  AS [WebSite], jc.[ModifiedDate] FROM HumanResources.JobCandidate AS jc   CROSS APPLY   jc.Resume.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume' ) AS Resume 
(ref)

go

CREATE VIEW [HumanResources].[vJobCandidateEmployment] AS  SELECT jc.[JobCandidateID],  CONVERT(datetime,  REPLACE(  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.StartDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Emp.StartDate],  CONVERT(datetime,  REPLACE(  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.EndDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Emp.EndDate],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.OrgName)[1]' , 'nvarchar(100)' )  AS [Emp.OrgName],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.JobTitle)[1]' , 'nvarchar(100)' )  AS [Emp.JobTitle],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Responsibility)[1]' , 'nvarchar(max)' )  AS [Emp.Responsibility],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.FunctionCategory)[1]' , 'nvarchar(max)' )  AS [Emp.FunctionCategory],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.IndustryCategory)[1]' , 'nvarchar(max)' )  AS [Emp.IndustryCategory],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.CountryRegion)[1]' , 'nvarchar(max)' )  AS [Emp.Loc.CountryRegion],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.State)[1]' , 'nvarchar(max)' )  AS [Emp.Loc.State],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.City)[1]' , 'nvarchar(max)' )  AS [Emp.Loc.City] FROM HumanResources.JobCandidate AS jc   CROSS APPLY   jc.Resume.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume/Employment' ) AS Employment 
(ref)

go

CREATE VIEW [HumanResources].[vJobCandidateEducation] AS  SELECT jc.[JobCandidateID],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Level)[1]' , 'nvarchar(max)' )  AS [Edu.Level],  CONVERT(datetime,  REPLACE(  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.StartDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Edu.StartDate],  CONVERT(datetime,  REPLACE(  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.EndDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Edu.EndDate],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Degree)[1]' , 'nvarchar(50)' )  AS [Edu.Degree],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Major)[1]' , 'nvarchar(50)' )  AS [Edu.Major],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Minor)[1]' , 'nvarchar(50)' )  AS [Edu.Minor],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.GPA)[1]' , 'nvarchar(5)' )  AS [Edu.GPA],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.GPAScale)[1]' , 'nvarchar(5)' )  AS [Edu.GPAScale],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.School)[1]' , 'nvarchar(100)' )  AS [Edu.School],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.CountryRegion)[1]' , 'nvarchar(100)' )  AS [Edu.Loc.CountryRegion],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.State)[1]' , 'nvarchar(100)' )  AS [Edu.Loc.State],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.City)[1]' , 'nvarchar(100)' )  AS [Edu.Loc.City] FROM HumanResources.JobCandidate AS jc   CROSS APPLY   jc.Resume.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume/Education' ) AS [Education] 
(ref)

go

CREATE VIEW [Production].[vProductAndDescription] WITH SCHEMABINDING  AS  SELECT p.[ProductID], p.[Name], pm.[Name] AS [ProductModel], pmx.[CultureID], pd.[Description] FROM Production.Product AS p   INNER JOIN   Production.ProductModel AS pm ON p.[ProductModelID] = pm.[ProductModelID]   INNER JOIN   Production.ProductModelProductDescriptionCulture AS pmx ON pm.[ProductModelID] = pmx.[ProductModelID]   INNER JOIN   Production.ProductDescription AS pd ON pmx.[ProductDescriptionID] = pd.[ProductDescriptionID]
go

CREATE VIEW [vProductModelCatalogDescriptio]([ProductModelID],[Name],[Summary],[Manufacturer],[Copyright],[ProductURL],[WarrantyPeriod],[WarrantyDescription],[NoOfYears],[MaintenanceDescription],[Wheel],[Saddle],[Pedal],[BikeFrame],[Crankset],[PictureAngle],[PictureSize],[ProductPhotoID],[Material],[Color],[ProductLine],[Style],[RiderExperience],[rowguid],[ModifiedDate])
AS
SELECT [ProductModel].[ProductModelID],[ProductModel].[Name], [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace html="http://www.w3.org/1999/xhtml"; 
        (/p1:ProductDescription/p1:Summary/html:p)[1]' , 'nvarchar(max)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:Name)[1]' , 'nvarchar(max)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:Copyright)[1]' , 'nvarchar(30)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:ProductURL)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Warranty/wm:WarrantyPeriod)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Warranty/wm:Description)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Maintenance/wm:NoOfYears)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Maintenance/wm:Description)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:wheel)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:saddle)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:pedal)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:BikeFrame)[1]' , 'nvarchar(max)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:crankset)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:Angle)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:Size)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:ProductPhotoID)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Material)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Color)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/ProductLine)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Style)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/RiderExperience)[1]' , 'nvarchar(1024)' ) ,[ProductModel].[rowguid],[ProductModel].[ModifiedDate]
	FROM [ProductModel]
		WHERE [CatalogDescription] IS NOT NULL
go

CREATE VIEW [Production].[vProductModelInstructions] AS  SELECT [ProductModelID], [Name],  [Instructions].value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
        (/root/text())[1]' , 'nvarchar(max)' )  AS [Instructions],  [MfgInstructions].ref.value( '@LocationID [1]' , 'int' )  AS [LocationID],  [MfgInstructions].ref.value( '@SetupHours [1]' , 'decimal(9, 4)' )  AS [SetupHours],  [MfgInstructions].ref.value( '@MachineHours [1]' , 'decimal(9, 4)' )  AS [MachineHours],  [MfgInstructions].ref.value( '@LaborHours [1]' , 'decimal(9, 4)' )  AS [LaborHours],  [MfgInstructions].ref.value( '@LotSize [1]' , 'int' )  AS [LotSize],  [Steps].ref.value( 'string(.)[1]' , 'nvarchar(1024)' )  AS [Step], [rowguid], [ModifiedDate] FROM Production.ProductModel   CROSS APPLY   Instructions.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
    /root/Location' ) AS MfgInstructions 
(ref)
   CROSS APPLY   MfgInstructions.ref.nodes( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
    step' ) AS Steps 
(ref)

go

CREATE VIEW [Sales].[vSalesPerson] AS  SELECT s.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], a.[AddressLine1], a.[AddressLine2], a.[City], sp.Name AS StateProvinceName, a.[PostalCode], cr.Name AS CountryRegionName, st.Name AS TerritoryName, st.Group AS TerritoryGroup, s.[SalesQuota], s.[SalesYTD], s.[SalesLastYear] FROM Sales.SalesPerson AS s   INNER JOIN   HumanResources.Employee AS e ON e.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   LEFT OUTER JOIN   Sales.SalesTerritory AS st ON st.[TerritoryID] = s.[TerritoryID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Person].[vStateProvinceCountryRegion] WITH SCHEMABINDING  AS  SELECT sp.[StateProvinceID], sp.[StateProvinceCode], sp.[IsOnlyStateProvinceFlag], sp.[Name] AS [StateProvinceName], sp.[TerritoryID], cr.[CountryRegionCode], cr.[Name] AS [CountryRegionName] FROM Person.StateProvince AS sp   INNER JOIN   Person.CountryRegion AS cr ON sp.[CountryRegionCode] = cr.[CountryRegionCode]
go

CREATE VIEW [vStoreWithDemographics]([BusinessEntityID],[Name],[AnnualSales],[AnnualRevenue],[BankName],[BusinessType],[YearOpened],[Specialty],[SquareFeet],[Brands],[Internet],[NumberEmployees])
AS
SELECT s.[BusinessEntityID],s.[Name], s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualSales)[1]' , 'money' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualRevenue)[1]' , 'money' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BankName)[1]' , 'nvarchar(50)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BusinessType)[1]' , 'nvarchar(5)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/YearOpened)[1]' , 'integer' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Specialty)[1]' , 'nvarchar(50)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/SquareFeet)[1]' , 'integer' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Brands)[1]' , 'nvarchar(30)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Internet)[1]' , 'nvarchar(30)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/NumberEmployees)[1]' , 'integer' ) 
	FROM [Store] s
go

CREATE VIEW [Sales].[vStoreWithContacts] AS  SELECT s.[BusinessEntityID], s.[Name], ct.[Name] AS [ContactType], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion] FROM Sales.Store AS s   INNER JOIN   Person.BusinessEntityContact AS bec ON bec.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.ContactType AS ct ON ct.[ContactTypeID] = bec.[ContactTypeID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = bec.[PersonID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Sales].[vStoreWithAddresses] AS  SELECT s.[BusinessEntityID], s.[Name], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName] FROM Sales.Store AS s   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]
go

CREATE VIEW [Purchasing].[vVendorWithContacts] AS  SELECT v.[BusinessEntityID], v.[Name], ct.[Name] AS [ContactType], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion] FROM Purchasing.Vendor AS v   INNER JOIN   Person.BusinessEntityContact AS bec ON bec.[BusinessEntityID] = v.[BusinessEntityID]   INNER JOIN   Person.ContactType AS ct ON ct.[ContactTypeID] = bec.[ContactTypeID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = bec.[PersonID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Purchasing].[vVendorWithAddresses] AS  SELECT v.[BusinessEntityID], v.[Name], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName] FROM Purchasing.Vendor AS v   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = v.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]
go

CREATE VIEW [Sales].[vSalesPersonSalesByFiscalYears] AS  SELECT pvt.[SalesPersonID], pvt.[FullName], pvt.[JobTitle], pvt.[SalesTerritory], pvt.[2002], pvt.[2003], pvt.[2004] FROM (  SELECT soh.[SalesPersonID], p.[FirstName] + ' ' +  Coalesce(p.[MiddleName] , '')  + ' ' + p.[LastName] AS [FullName], e.[JobTitle], st.[Name] AS [SalesTerritory], soh.[SubTotal],  Year( DateAdd(m, 6, soh.[OrderDate])) AS [FiscalYear] FROM Sales.SalesPerson AS sp   INNER JOIN   Sales.SalesOrderHeader AS soh ON sp.[BusinessEntityID] = soh.[SalesPersonID]   INNER JOIN   Sales.SalesTerritory AS st ON sp.[TerritoryID] = st.[TerritoryID]   INNER JOIN   HumanResources.Employee AS e ON soh.[SalesPersonID] = e.[BusinessEntityID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = sp.[BusinessEntityID] ) AS soh  PIVOT ( SUM( [SubTotal]) FOR FiscalYear IN 
([2002], 
	[2003], 
	[2004])
 )   pvt
go


ALTER TABLE [Address] WITH CHECK 
	ADD CONSTRAINT [FK_Person.StateProvince_Person] FOREIGN KEY ([StateProvinceID]) REFERENCES [StateProvince]([StateProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Address]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.StateProvince_Person]
go


ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_EndDate]
		CHECK  ( [EndDate]>[StartDate] OR [EndDate] IS NULL ) 
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_ProductAsse]
		CHECK  ( [ProductAssemblyID]<>[ComponentID] ) 
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_BOMLevel]
		CHECK  ( [ProductAssemblyID] IS NULL AND [BOMLevel]=(0) AND [PerAssemblyQty]=(1.00) OR [ProductAssemblyID] IS NOT NULL AND [BOMLevel]>=(1) ) 
go


ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductAssemblyID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ComponentID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_Production.UnitMeasure_Prod] FOREIGN KEY ([UnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.UnitMeasure_Prod]
go


ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Address_Person.Busin] FOREIGN KEY ([AddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Address_Person.Busin]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_Person.AddressType_Person.B] FOREIGN KEY ([AddressTypeID]) REFERENCES [AddressType]([AddressTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.AddressType_Person.B]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_Person.BusinessEntity_Perso] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.BusinessEntity_Perso]
go


ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_Person.Busine] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_Person.Busine]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_Person.ContactType_Person.B] FOREIGN KEY ([ContactTypeID]) REFERENCES [ContactType]([ContactTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.ContactType_Person.B]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_Person.BusinessEntity_Perso] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.BusinessEntity_Perso]
go


ALTER TABLE [CountryRegionCurrency] WITH CHECK 
	ADD CONSTRAINT [FK_Person.CountryRegion_Sales.] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CountryRegionCurrency]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.CountryRegion_Sales.]
go

ALTER TABLE [CountryRegionCurrency] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.Currency_Sales.Countr] FOREIGN KEY ([CurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CountryRegionCurrency]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.Currency_Sales.Countr]
go


ALTER TABLE [CurrencyRate] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.Currency_Sales.Curren] FOREIGN KEY ([FromCurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CurrencyRate]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.Currency_Sales.Curren]
go

ALTER TABLE [CurrencyRate] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.Currency_Sales.Curren] FOREIGN KEY ([ToCurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CurrencyRate]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.Currency_Sales.Curren]
go


ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_Sales.Custome] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_Sales.Custome]
go

ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.Store_Sales.Customer] FOREIGN KEY ([StoreID]) REFERENCES [Store]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.Store_Sales.Customer]
go

ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesTerritory_Sales.] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesTerritory_Sales.]
go


ALTER TABLE [Document] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Employee_Pro] FOREIGN KEY ([Owner]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Document]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Employee_Pro]
go


ALTER TABLE [EmailAddress] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_Person.EmailA] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmailAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_Person.EmailA]
go


ALTER TABLE [Employee] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_HumanResource] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Employee]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_HumanResource]
go


ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_EmployeeDepartmentHistory_E]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Department_H] FOREIGN KEY ([DepartmentID]) REFERENCES [Department]([DepartmentID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeeDepartmentHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Department_H]
go

ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Employee_Hum] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeeDepartmentHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Employee_Hum]
go

ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Shift_HumanR] FOREIGN KEY ([ShiftID]) REFERENCES [Shift]([ShiftID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeeDepartmentHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Shift_HumanR]
go


ALTER TABLE [EmployeePayHistory] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Employee_Hum] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeePayHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Employee_Hum]
go


ALTER TABLE [JobCandidate] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Employee_Hum] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [JobCandidate]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Employee_Hum]
go


ALTER TABLE [Password] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_Person.Passwo] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Password]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_Person.Passwo]
go


ALTER TABLE [Person] WITH CHECK 
	ADD CONSTRAINT [FK_Person.BusinessEntity_Perso] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Person]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.BusinessEntity_Perso]
go


ALTER TABLE [PersonCreditCard] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_Sales.PersonC] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonCreditCard]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_Sales.PersonC]
go

ALTER TABLE [PersonCreditCard] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.CreditCard_Sales.Pers] FOREIGN KEY ([CreditCardID]) REFERENCES [CreditCard]([CreditCardID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonCreditCard]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.CreditCard_Sales.Pers]
go


ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Person_Person.Person] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Person_Person.Person]
go

ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_Person.PhoneNumberType_Pers] FOREIGN KEY ([PhoneNumberTypeID]) REFERENCES [PhoneNumberType]([PhoneNumberTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.PhoneNumberType_Pers]
go


ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT  [CK_Product_SellEndDate]
		CHECK  ( [SellEndDate]>=[SellStartDate] OR [SellEndDate] IS NULL ) 
go


ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Production.UnitMeasure_Prod] FOREIGN KEY ([SizeUnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.UnitMeasure_Prod]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Production.UnitMeasure_Prod] FOREIGN KEY ([WeightUnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.UnitMeasure_Prod]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductModel_Pro] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductModel_Pro]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductSubcatego] FOREIGN KEY ([ProductSubcategoryID]) REFERENCES [ProductSubcategory]([ProductSubcategoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductSubcatego]
go


ALTER TABLE [ProductCostHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_ProductCostHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [ProductCostHistory] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductCostHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go


ALTER TABLE [ProductDocument] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductDocument]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go

ALTER TABLE [ProductDocument] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Document_Product] FOREIGN KEY ([DocumentNode]) REFERENCES [Document]([DocumentNode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductDocument]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Document_Product]
go


ALTER TABLE [ProductInventory] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Location_Product] FOREIGN KEY ([LocationID]) REFERENCES [Location]([LocationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductInventory]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Location_Product]
go

ALTER TABLE [ProductInventory] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductInventory]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go


ALTER TABLE [ProductListPriceHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_ProductListPriceHistory_End]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [ProductListPriceHistory] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductListPriceHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go


ALTER TABLE [ProductModelIllustration] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductModel_Pro] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelIllustration]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductModel_Pro]
go

ALTER TABLE [ProductModelIllustration] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Illustration_Pro] FOREIGN KEY ([IllustrationID]) REFERENCES [Illustration]([IllustrationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelIllustration]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Illustration_Pro]
go


ALTER TABLE [ProductModelProductDescription] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductDescripti] FOREIGN KEY ([ProductDescriptionID]) REFERENCES [ProductDescription]([ProductDescriptionID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescription]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductDescripti]
go

ALTER TABLE [ProductModelProductDescription] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Culture_Producti] FOREIGN KEY ([CultureID]) REFERENCES [Culture]([CultureID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescription]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Culture_Producti]
go

ALTER TABLE [ProductModelProductDescription] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductModel_Pro] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescription]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductModel_Pro]
go


ALTER TABLE [ProductProductPhoto] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductProductPhoto]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go

ALTER TABLE [ProductProductPhoto] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductPhoto_Pro] FOREIGN KEY ([ProductPhotoID]) REFERENCES [ProductPhoto]([ProductPhotoID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductProductPhoto]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductPhoto_Pro]
go


ALTER TABLE [ProductReview] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductReview]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go


ALTER TABLE [ProductSubcategory] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ProductCategory_] FOREIGN KEY ([ProductCategoryID]) REFERENCES [ProductCategory]([ProductCategoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductSubcategory]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ProductCategory_]
go


ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Purchasi] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Purchasi]
go

ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_Production.UnitMeasure_Purc] FOREIGN KEY ([UnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.UnitMeasure_Purc]
go

ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_Purchasing.Vendor_Purchasin] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Vendor]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_Purchasing.Vendor_Purchasin]
go


ALTER TABLE [PurchaseOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Purchasi] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Purchasi]
go

ALTER TABLE [PurchaseOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_Purchasing.PurchaseOrderHea] FOREIGN KEY ([PurchaseOrderID]) REFERENCES [PurchaseOrderHeader]([PurchaseOrderID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_Purchasing.PurchaseOrderHea]
go


ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_PurchaseOrderHeader_ShipDat]
		CHECK  ( [ShipDate]>=[OrderDate] OR [ShipDate] IS NULL ) 
go


ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Employee_Pur] FOREIGN KEY ([EmployeeID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Employee_Pur]
go

ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Purchasing.Vendor_Purchasin] FOREIGN KEY ([VendorID]) REFERENCES [Vendor]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Purchasing.Vendor_Purchasin]
go

ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Purchasing.ShipMethod_Purch] FOREIGN KEY ([ShipMethodID]) REFERENCES [ShipMethod]([ShipMethodID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Purchasing.ShipMethod_Purch]
go


ALTER TABLE [SalesOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesOrderHeader_Sale] FOREIGN KEY ([SalesOrderID]) REFERENCES [SalesOrderHeader]([SalesOrderID])
		ON DELETE CASCADE
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesOrderHeader_Sale]
go

ALTER TABLE [SalesOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SpecialOfferProduct_S] FOREIGN KEY ([SpecialOfferID],[ProductID]) REFERENCES [SpecialOfferProduct]([SpecialOfferID],[ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SpecialOfferProduct_S]
go


ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesOrderHeader_DueDate]
		CHECK  ( [DueDate]>=[OrderDate] ) 
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesOrderHeader_ShipDate]
		CHECK  ( [ShipDate]>=[OrderDate] OR [ShipDate] IS NULL ) 
go


ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Address_Sales.SalesO] FOREIGN KEY ([BillToAddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Address_Sales.SalesO]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Person.Address_Sales.SalesO] FOREIGN KEY ([ShipToAddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.Address_Sales.SalesO]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.CreditCard_Sales.Sale] FOREIGN KEY ([CreditCardID]) REFERENCES [CreditCard]([CreditCardID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.CreditCard_Sales.Sale]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.CurrencyRate_Sales.Sa] FOREIGN KEY ([CurrencyRateID]) REFERENCES [CurrencyRate]([CurrencyRateID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.CurrencyRate_Sales.Sa]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.Customer_Sales.SalesO] FOREIGN KEY ([CustomerID]) REFERENCES [Customer]([CustomerID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.Customer_Sales.SalesO]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesPerson_Sales.Sal] FOREIGN KEY ([SalesPersonID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesPerson_Sales.Sal]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Purchasing.ShipMethod_Sales] FOREIGN KEY ([ShipMethodID]) REFERENCES [ShipMethod]([ShipMethodID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Purchasing.ShipMethod_Sales]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesTerritory_Sales.] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesTerritory_Sales.]
go


ALTER TABLE [SalesOrderHeaderSalesReason] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesReason_Sales.Sal] FOREIGN KEY ([SalesReasonID]) REFERENCES [SalesReason]([SalesReasonID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesReason_Sales.Sal]
go

ALTER TABLE [SalesOrderHeaderSalesReason] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesOrderHeader_Sale] FOREIGN KEY ([SalesOrderID]) REFERENCES [SalesOrderHeader]([SalesOrderID])
		ON DELETE CASCADE
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesOrderHeader_Sale]
go


ALTER TABLE [SalesPerson] WITH CHECK 
	ADD CONSTRAINT [FK_HumanResources.Employee_Sal] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPerson]
	  WITH CHECK CHECK CONSTRAINT [FK_HumanResources.Employee_Sal]
go

ALTER TABLE [SalesPerson] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesTerritory_Sales.] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPerson]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesTerritory_Sales.]
go


ALTER TABLE [SalesPersonQuotaHistory] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesPerson_Sales.Sal] FOREIGN KEY ([BusinessEntityID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPersonQuotaHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesPerson_Sales.Sal]
go


ALTER TABLE [SalesTaxRate] WITH CHECK 
	ADD CONSTRAINT [FK_Person.StateProvince_Sales.] FOREIGN KEY ([StateProvinceID]) REFERENCES [StateProvince]([StateProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTaxRate]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.StateProvince_Sales.]
go


ALTER TABLE [SalesTerritory] WITH CHECK 
	ADD CONSTRAINT [FK_Person.CountryRegion_Sales.] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritory]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.CountryRegion_Sales.]
go


ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesTerritoryHistory_EndDa]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesPerson_Sales.Sal] FOREIGN KEY ([BusinessEntityID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritoryHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesPerson_Sales.Sal]
go

ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesTerritory_Sales.] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritoryHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesTerritory_Sales.]
go


ALTER TABLE [ShoppingCartItem] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Sales.Sh] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ShoppingCartItem]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Sales.Sh]
go


ALTER TABLE [SpecialOffer] WITH CHECK 
	ADD CONSTRAINT  [CK_SpecialOffer_EndDate]
		CHECK  ( [EndDate]>=[StartDate] ) 
go


ALTER TABLE [SpecialOfferProduct] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Sales.Sp] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SpecialOfferProduct]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Sales.Sp]
go

ALTER TABLE [SpecialOfferProduct] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SpecialOffer_Sales.Sp] FOREIGN KEY ([SpecialOfferID]) REFERENCES [SpecialOffer]([SpecialOfferID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SpecialOfferProduct]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SpecialOffer_Sales.Sp]
go


ALTER TABLE [StateProvince] WITH CHECK 
	ADD CONSTRAINT [FK_Person.CountryRegion_Person] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StateProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.CountryRegion_Person]
go

ALTER TABLE [StateProvince] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesTerritory_Person] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StateProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesTerritory_Person]
go


ALTER TABLE [Store] WITH CHECK 
	ADD CONSTRAINT [FK_Person.BusinessEntity_Sales] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Store]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.BusinessEntity_Sales]
go

ALTER TABLE [Store] WITH CHECK 
	ADD CONSTRAINT [FK_Sales.SalesPerson_Sales.Sto] FOREIGN KEY ([SalesPersonID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Store]
	  WITH CHECK CHECK CONSTRAINT [FK_Sales.SalesPerson_Sales.Sto]
go


ALTER TABLE [TransactionHistory] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [TransactionHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go


ALTER TABLE [Vendor] WITH CHECK 
	ADD CONSTRAINT [FK_Person.BusinessEntity_Purch] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Vendor]
	  WITH CHECK CHECK CONSTRAINT [FK_Person.BusinessEntity_Purch]
go


ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrder_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Product_Producti] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrder]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Product_Producti]
go

ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT [FK_Production.ScrapReason_Prod] FOREIGN KEY ([ScrapReasonID]) REFERENCES [ScrapReason]([ScrapReasonID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrder]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.ScrapReason_Prod]
go


ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrderRouting_ScheduledE]
		CHECK  ( [ScheduledEndDate]>=[ScheduledStartDate] ) 
go

ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrderRouting_ActualEndD]
		CHECK  ( [ActualEndDate]>=[ActualStartDate] OR [ActualEndDate] IS NULL OR [ActualStartDate] IS NULL ) 
go


ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT [FK_Production.Location_Product] FOREIGN KEY ([LocationID]) REFERENCES [Location]([LocationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrderRouting]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.Location_Product]
go

ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT [FK_Production.WorkOrder_Produc] FOREIGN KEY ([WorkOrderID]) REFERENCES [WorkOrder]([WorkOrderID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrderRouting]
	  WITH CHECK CHECK CONSTRAINT [FK_Production.WorkOrder_Produc]
go

CREATE TRIGGER Person.tD_Address ON Person.Address FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Address */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.Address  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00052a23", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="ShipToAddressID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.ShipToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Address because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Address  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="BillToAddressID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.BillToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Address because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Address  Person.BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Person.Busin", FK_COLUMNS="AddressID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityAddress,deleted," = "," AND") */
        Person.BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Address because Person.BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.StateProvince  Person.Address on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Person", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Person", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (SELECT * FROM deleted,Person.StateProvince
      WHERE
        /* %JoinFKPK(deleted,Person.StateProvince," = "," AND") */
        deleted.StateProvinceID = Person.StateProvince.StateProvinceID AND
        NOT EXISTS (
          SELECT * FROM Person.Address
          WHERE
            /* %JoinFKPK(Person.Address,Person.StateProvince," = "," AND") */
            Person.Address.StateProvinceID = Person.StateProvince.StateProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.Address because Person.StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_Address ON Person.Address FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Address */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.Address  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00057d90", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="ShipToAddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.ShipToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Address because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Address  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="BillToAddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.BillToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Address because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Address  Person.BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Person.Busin", FK_COLUMNS="AddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityAddress,deleted," = "," AND") */
        Person.BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Address because Person.BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.StateProvince  Person.Address on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Person", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Person", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.StateProvince
        WHERE
          /* %JoinFKPK(inserted,Person.StateProvince) */
          inserted.StateProvinceID = Person.StateProvince.StateProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.Address because Person.StateProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_AddressType ON Person.AddressType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AddressType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.AddressType  Person.BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015079", PARENT_OWNER="Person", PARENT_TABLE="AddressType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.AddressType_Person.B", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityAddress,deleted," = "," AND") */
        Person.BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.AddressType because Person.BusinessEntityAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_AddressType ON Person.AddressType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AddressType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.AddressType  Person.BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001784b", PARENT_OWNER="Person", PARENT_TABLE="AddressType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.AddressType_Person.B", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityAddress,deleted," = "," AND") */
        Person.BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.AddressType because Person.BusinessEntityAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_BillOfMaterials ON Production.BillOfMaterials FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BillOfMaterials */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004e4bf", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Production.BillOfMaterials
          WHERE
            /* %JoinFKPK(Production.BillOfMaterials,Production.UnitMeasure," = "," AND") */
            Production.BillOfMaterials.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.BillOfMaterials because Production.UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ComponentID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ComponentID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.BillOfMaterials
          WHERE
            /* %JoinFKPK(Production.BillOfMaterials,Production.Product," = "," AND") */
            Production.BillOfMaterials.ComponentID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.BillOfMaterials because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductAssemblyID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductAssemblyID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.BillOfMaterials
          WHERE
            /* %JoinFKPK(Production.BillOfMaterials,Production.Product," = "," AND") */
            Production.BillOfMaterials.ProductAssemblyID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.BillOfMaterials because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_BillOfMaterials ON Production.BillOfMaterials FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BillOfMaterials */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBillOfMaterialsID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00050f89", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.BillOfMaterials because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ComponentID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ComponentID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ComponentID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.BillOfMaterials because Production.Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductAssemblyID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductAssemblyID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductAssemblyID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductAssemblyID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.BillOfMaterials because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_BusinessEntity ON Person.BusinessEntity FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntity */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Purchasing.Vendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006236c", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Purchasing", CHILD_TABLE="Vendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Purch", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.Vendor
      WHERE
        /*  %JoinFKPK(Purchasing.Vendor,deleted," = "," AND") */
        Purchasing.Vendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.BusinessEntity because Purchasing.Vendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Sales.Store on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Sales", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Store
      WHERE
        /*  %JoinFKPK(Sales.Store,deleted," = "," AND") */
        Sales.Store.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.BusinessEntity because Sales.Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Person.Person on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.Person
      WHERE
        /*  %JoinFKPK(Person.Person,deleted," = "," AND") */
        Person.Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.BusinessEntity because Person.Person exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Person.BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityContact
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityContact,deleted," = "," AND") */
        Person.BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.BusinessEntity because Person.BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Person.BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityAddress,deleted," = "," AND") */
        Person.BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.BusinessEntity because Person.BusinessEntityAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_BusinessEntity ON Person.BusinessEntity FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntity */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Purchasing.Vendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0006b0f3", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Purchasing", CHILD_TABLE="Vendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Purch", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.Vendor
      WHERE
        /*  %JoinFKPK(Purchasing.Vendor,deleted," = "," AND") */
        Purchasing.Vendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.BusinessEntity because Purchasing.Vendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Sales.Store on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Sales", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Store
      WHERE
        /*  %JoinFKPK(Sales.Store,deleted," = "," AND") */
        Sales.Store.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.BusinessEntity because Sales.Store exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Person.Person on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.Person
      WHERE
        /*  %JoinFKPK(Person.Person,deleted," = "," AND") */
        Person.Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.BusinessEntity because Person.Person exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Person.BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityContact
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityContact,deleted," = "," AND") */
        Person.BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.BusinessEntity because Person.BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Person.BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityAddress,deleted," = "," AND") */
        Person.BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.BusinessEntity because Person.BusinessEntityAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_BusinessEntityAddress ON Person.BusinessEntityAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Person.BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004f250", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,Person.BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.BusinessEntityAddress
          WHERE
            /* %JoinFKPK(Person.BusinessEntityAddress,Person.BusinessEntity," = "," AND") */
            Person.BusinessEntityAddress.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.BusinessEntityAddress because Person.BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.AddressType  Person.BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="AddressType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.AddressType_Person.B", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (SELECT * FROM deleted,Person.AddressType
      WHERE
        /* %JoinFKPK(deleted,Person.AddressType," = "," AND") */
        deleted.AddressTypeID = Person.AddressType.AddressTypeID AND
        NOT EXISTS (
          SELECT * FROM Person.BusinessEntityAddress
          WHERE
            /* %JoinFKPK(Person.BusinessEntityAddress,Person.AddressType," = "," AND") */
            Person.BusinessEntityAddress.AddressTypeID = Person.AddressType.AddressTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.BusinessEntityAddress because Person.AddressType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Address  Person.BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Person.Busin", FK_COLUMNS="AddressID" */
    IF EXISTS (SELECT * FROM deleted,Person.Address
      WHERE
        /* %JoinFKPK(deleted,Person.Address," = "," AND") */
        deleted.AddressID = Person.Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM Person.BusinessEntityAddress
          WHERE
            /* %JoinFKPK(Person.BusinessEntityAddress,Person.Address," = "," AND") */
            Person.BusinessEntityAddress.AddressID = Person.Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.BusinessEntityAddress because Person.Address exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_BusinessEntityAddress ON Person.BusinessEntityAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insAddressID int, 
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Person.BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004c8f5", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,Person.BusinessEntity) */
          inserted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.BusinessEntityAddress because Person.BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.AddressType  Person.BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="AddressType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.AddressType_Person.B", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.AddressType
        WHERE
          /* %JoinFKPK(inserted,Person.AddressType) */
          inserted.AddressTypeID = Person.AddressType.AddressTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.BusinessEntityAddress because Person.AddressType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Address  Person.BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Person.Busin", FK_COLUMNS="AddressID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Address
        WHERE
          /* %JoinFKPK(inserted,Person.Address) */
          inserted.AddressID = Person.Address.AddressID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.BusinessEntityAddress because Person.Address does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_BusinessEntityContact ON Person.BusinessEntityContact FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Person.BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004d97c", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,Person.BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.BusinessEntityContact
          WHERE
            /* %JoinFKPK(Person.BusinessEntityContact,Person.BusinessEntity," = "," AND") */
            Person.BusinessEntityContact.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.BusinessEntityContact because Person.BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.ContactType  Person.BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="ContactType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.ContactType_Person.B", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (SELECT * FROM deleted,Person.ContactType
      WHERE
        /* %JoinFKPK(deleted,Person.ContactType," = "," AND") */
        deleted.ContactTypeID = Person.ContactType.ContactTypeID AND
        NOT EXISTS (
          SELECT * FROM Person.BusinessEntityContact
          WHERE
            /* %JoinFKPK(Person.BusinessEntityContact,Person.ContactType," = "," AND") */
            Person.BusinessEntityContact.ContactTypeID = Person.ContactType.ContactTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.BusinessEntityContact because Person.ContactType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Person.BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Busine", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.PersonID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.BusinessEntityContact
          WHERE
            /* %JoinFKPK(Person.BusinessEntityContact,Person.Person," = "," AND") */
            Person.BusinessEntityContact.PersonID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.BusinessEntityContact because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_BusinessEntityContact ON Person.BusinessEntityContact FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPersonID int, 
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Person.BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004d434", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,Person.BusinessEntity) */
          inserted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.BusinessEntityContact because Person.BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.ContactType  Person.BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="ContactType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.ContactType_Person.B", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.ContactType
        WHERE
          /* %JoinFKPK(inserted,Person.ContactType) */
          inserted.ContactTypeID = Person.ContactType.ContactTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.BusinessEntityContact because Person.ContactType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Person.BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Busine", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.PersonID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.BusinessEntityContact because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_ContactType ON Person.ContactType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContactType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.ContactType  Person.BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001640b", PARENT_OWNER="Person", PARENT_TABLE="ContactType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.ContactType_Person.B", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityContact
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityContact,deleted," = "," AND") */
        Person.BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.ContactType because Person.BusinessEntityContact exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_ContactType ON Person.ContactType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContactType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.ContactType  Person.BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017734", PARENT_OWNER="Person", PARENT_TABLE="ContactType"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.ContactType_Person.B", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityContact
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityContact,deleted," = "," AND") */
        Person.BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.ContactType because Person.BusinessEntityContact exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_CountryRegion ON Person.CountryRegion FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegion */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.CountryRegion  Person.StateProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003dd36", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Person", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,Person.StateProvince
      WHERE
        /*  %JoinFKPK(Person.StateProvince,deleted," = "," AND") */
        Person.StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.CountryRegion because Person.StateProvince exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.CountryRegion  Sales.SalesTerritory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /*  %JoinFKPK(Sales.SalesTerritory,deleted," = "," AND") */
        Sales.SalesTerritory.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.CountryRegion because Sales.SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.CountryRegion  Sales.CountryRegionCurrency on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(Sales.CountryRegionCurrency,deleted," = "," AND") */
        Sales.CountryRegionCurrency.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.CountryRegion because Sales.CountryRegionCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_CountryRegion ON Person.CountryRegion FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegion */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.CountryRegion  Person.StateProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00043a9e", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Person", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.StateProvince
      WHERE
        /*  %JoinFKPK(Person.StateProvince,deleted," = "," AND") */
        Person.StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.CountryRegion because Person.StateProvince exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.CountryRegion  Sales.SalesTerritory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /*  %JoinFKPK(Sales.SalesTerritory,deleted," = "," AND") */
        Sales.SalesTerritory.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.CountryRegion because Sales.SalesTerritory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.CountryRegion  Sales.CountryRegionCurrency on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(Sales.CountryRegionCurrency,deleted," = "," AND") */
        Sales.CountryRegionCurrency.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.CountryRegion because Sales.CountryRegionCurrency exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_CountryRegionCurrency ON Sales.CountryRegionCurrency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegionCurrency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Currency  Sales.CountryRegionCurrency on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003502b", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Countr", FK_COLUMNS="CurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Sales.Currency
      WHERE
        /* %JoinFKPK(deleted,Sales.Currency," = "," AND") */
        deleted.CurrencyCode = Sales.Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM Sales.CountryRegionCurrency
          WHERE
            /* %JoinFKPK(Sales.CountryRegionCurrency,Sales.Currency," = "," AND") */
            Sales.CountryRegionCurrency.CurrencyCode = Sales.Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.CountryRegionCurrency because Sales.Currency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.CountryRegion  Sales.CountryRegionCurrency on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,Person.CountryRegion
      WHERE
        /* %JoinFKPK(deleted,Person.CountryRegion," = "," AND") */
        deleted.CountryRegionCode = Person.CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM Sales.CountryRegionCurrency
          WHERE
            /* %JoinFKPK(Sales.CountryRegionCurrency,Person.CountryRegion," = "," AND") */
            Sales.CountryRegionCurrency.CountryRegionCode = Person.CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.CountryRegionCurrency because Person.CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_CountryRegionCurrency ON Sales.CountryRegionCurrency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegionCurrency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3), 
           @insCurrencyCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Currency  Sales.CountryRegionCurrency on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00034251", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Countr", FK_COLUMNS="CurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Currency
        WHERE
          /* %JoinFKPK(inserted,Sales.Currency) */
          inserted.CurrencyCode = Sales.Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.CountryRegionCurrency because Sales.Currency does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.CountryRegion  Sales.CountryRegionCurrency on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.CountryRegion
        WHERE
          /* %JoinFKPK(inserted,Person.CountryRegion) */
          inserted.CountryRegionCode = Person.CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.CountryRegionCurrency because Person.CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_CreditCard ON Sales.CreditCard FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CreditCard */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.CreditCard  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028247", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Sale", FK_COLUMNS="CreditCardID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.CreditCard because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.CreditCard  Sales.PersonCreditCard on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Pers", FK_COLUMNS="CreditCardID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.PersonCreditCard
      WHERE
        /*  %JoinFKPK(Sales.PersonCreditCard,deleted," = "," AND") */
        Sales.PersonCreditCard.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.CreditCard because Sales.PersonCreditCard exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_CreditCard ON Sales.CreditCard FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CreditCard */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCreditCardID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.CreditCard  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002bd90", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Sale", FK_COLUMNS="CreditCardID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.CreditCard because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.CreditCard  Sales.PersonCreditCard on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Pers", FK_COLUMNS="CreditCardID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.PersonCreditCard
      WHERE
        /*  %JoinFKPK(Sales.PersonCreditCard,deleted," = "," AND") */
        Sales.PersonCreditCard.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.CreditCard because Sales.PersonCreditCard exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Culture ON Production.Culture FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Culture */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Culture  Production.ProductModelProductDescription on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000171f1", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Culture_Producti", FK_COLUMNS="CultureID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescription
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescription,deleted," = "," AND") */
        Production.ProductModelProductDescription.CultureID = deleted.CultureID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Culture because Production.ProductModelProductDescription exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Culture ON Production.Culture FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Culture */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCultureID nchar(6),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Culture  Production.ProductModelProductDescription on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000197e0", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Culture_Producti", FK_COLUMNS="CultureID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CultureID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescription
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescription,deleted," = "," AND") */
        Production.ProductModelProductDescription.CultureID = deleted.CultureID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Culture because Production.ProductModelProductDescription exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_Currency ON Sales.Currency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Currency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Currency  Sales.CurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a673", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="ToCurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.CurrencyRate
      WHERE
        /*  %JoinFKPK(Sales.CurrencyRate,deleted," = "," AND") */
        Sales.CurrencyRate.ToCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Currency because Sales.CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Currency  Sales.CurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="FromCurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.CurrencyRate
      WHERE
        /*  %JoinFKPK(Sales.CurrencyRate,deleted," = "," AND") */
        Sales.CurrencyRate.FromCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Currency because Sales.CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Currency  Sales.CountryRegionCurrency on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Countr", FK_COLUMNS="CurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(Sales.CountryRegionCurrency,deleted," = "," AND") */
        Sales.CountryRegionCurrency.CurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Currency because Sales.CountryRegionCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_Currency ON Sales.Currency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Currency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Currency  Sales.CurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003eb21", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="ToCurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.CurrencyRate
      WHERE
        /*  %JoinFKPK(Sales.CurrencyRate,deleted," = "," AND") */
        Sales.CurrencyRate.ToCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Currency because Sales.CurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Currency  Sales.CurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="FromCurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.CurrencyRate
      WHERE
        /*  %JoinFKPK(Sales.CurrencyRate,deleted," = "," AND") */
        Sales.CurrencyRate.FromCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Currency because Sales.CurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Currency  Sales.CountryRegionCurrency on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Countr", FK_COLUMNS="CurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(Sales.CountryRegionCurrency,deleted," = "," AND") */
        Sales.CountryRegionCurrency.CurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Currency because Sales.CountryRegionCurrency exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_CurrencyRate ON Sales.CurrencyRate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CurrencyRate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.CurrencyRate  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00043e41", PARENT_OWNER="Sales", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CurrencyRate_Sales.Sa", FK_COLUMNS="CurrencyRateID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.CurrencyRateID = deleted.CurrencyRateID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.CurrencyRate because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Currency  Sales.CurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="ToCurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Sales.Currency
      WHERE
        /* %JoinFKPK(deleted,Sales.Currency," = "," AND") */
        deleted.ToCurrencyCode = Sales.Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM Sales.CurrencyRate
          WHERE
            /* %JoinFKPK(Sales.CurrencyRate,Sales.Currency," = "," AND") */
            Sales.CurrencyRate.ToCurrencyCode = Sales.Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.CurrencyRate because Sales.Currency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Currency  Sales.CurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="FromCurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Sales.Currency
      WHERE
        /* %JoinFKPK(deleted,Sales.Currency," = "," AND") */
        deleted.FromCurrencyCode = Sales.Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM Sales.CurrencyRate
          WHERE
            /* %JoinFKPK(Sales.CurrencyRate,Sales.Currency," = "," AND") */
            Sales.CurrencyRate.FromCurrencyCode = Sales.Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.CurrencyRate because Sales.Currency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_CurrencyRate ON Sales.CurrencyRate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CurrencyRate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyRateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.CurrencyRate  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000468c2", PARENT_OWNER="Sales", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CurrencyRate_Sales.Sa", FK_COLUMNS="CurrencyRateID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyRateID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.CurrencyRateID = deleted.CurrencyRateID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.CurrencyRate because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Currency  Sales.CurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="ToCurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ToCurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Currency
        WHERE
          /* %JoinFKPK(inserted,Sales.Currency) */
          inserted.ToCurrencyCode = Sales.Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.CurrencyRate because Sales.Currency does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Currency  Sales.CurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Currency"
    CHILD_OWNER="Sales", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Currency_Sales.Curren", FK_COLUMNS="FromCurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(FromCurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Currency
        WHERE
          /* %JoinFKPK(inserted,Sales.Currency) */
          inserted.FromCurrencyCode = Sales.Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.CurrencyRate because Sales.Currency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_Customer ON Sales.Customer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Customer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Customer  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00056c96", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Customer_Sales.SalesO", FK_COLUMNS="CustomerID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.CustomerID = deleted.CustomerID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Customer because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesTerritory," = "," AND") */
        deleted.TerritoryID = Sales.SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Sales.Customer
          WHERE
            /* %JoinFKPK(Sales.Customer,Sales.SalesTerritory," = "," AND") */
            Sales.Customer.TerritoryID = Sales.SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Customer because Sales.SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Store  Sales.Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Store"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Store_Sales.Customer", FK_COLUMNS="StoreID" */
    IF EXISTS (SELECT * FROM deleted,Sales.Store
      WHERE
        /* %JoinFKPK(deleted,Sales.Store," = "," AND") */
        deleted.StoreID = Sales.Store.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.Customer
          WHERE
            /* %JoinFKPK(Sales.Customer,Sales.Store," = "," AND") */
            Sales.Customer.StoreID = Sales.Store.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Customer because Sales.Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Sales.Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.Custome", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.PersonID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.Customer
          WHERE
            /* %JoinFKPK(Sales.Customer,Person.Person," = "," AND") */
            Sales.Customer.PersonID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Customer because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_Customer ON Sales.Customer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Customer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustomerID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Customer  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00061983", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Customer_Sales.SalesO", FK_COLUMNS="CustomerID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustomerID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.CustomerID = deleted.CustomerID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Customer because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesTerritory) */
          inserted.TerritoryID = Sales.SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Customer because Sales.SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.Store  Sales.Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Store"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Store_Sales.Customer", FK_COLUMNS="StoreID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StoreID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Store
        WHERE
          /* %JoinFKPK(inserted,Sales.Store) */
          inserted.StoreID = Sales.Store.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.StoreID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Customer because Sales.Store does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Sales.Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.Custome", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.PersonID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.PersonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Customer because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tD_Department ON HumanResources.Department FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Department */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Department  HumanResources.EmployeeDepartmentHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000175c6", PARENT_OWNER="HumanResources", PARENT_TABLE="Department"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Department_H", FK_COLUMNS="DepartmentID" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeeDepartmentHistory,deleted," = "," AND") */
        HumanResources.EmployeeDepartmentHistory.DepartmentID = deleted.DepartmentID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Department because HumanResources.EmployeeDepartmentHistory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tU_Department ON HumanResources.Department FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Department */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDepartmentID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Department  HumanResources.EmployeeDepartmentHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000191ec", PARENT_OWNER="HumanResources", PARENT_TABLE="Department"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Department_H", FK_COLUMNS="DepartmentID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DepartmentID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeeDepartmentHistory,deleted," = "," AND") */
        HumanResources.EmployeeDepartmentHistory.DepartmentID = deleted.DepartmentID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Department because HumanResources.EmployeeDepartmentHistory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Document ON Production.Document FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Document */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Document  Production.ProductDocument on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002e899", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Document_Product", FK_COLUMNS="DocumentNode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.DocumentNode = deleted.DocumentNode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Document because Production.ProductDocument exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Production.Document on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Production", CHILD_TABLE="Document"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pro", FK_COLUMNS="Owner" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.Owner = HumanResources.Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Production.Document
          WHERE
            /* %JoinFKPK(Production.Document,HumanResources.Employee," = "," AND") */
            Production.Document.Owner = HumanResources.Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Document because HumanResources.Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Document ON Production.Document FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Document */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDocumentNode hierarchyid,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Document  Production.ProductDocument on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002f5d7", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Document_Product", FK_COLUMNS="DocumentNode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DocumentNode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.DocumentNode = deleted.DocumentNode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Document because Production.ProductDocument exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Production.Document on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Production", CHILD_TABLE="Document"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pro", FK_COLUMNS="Owner" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(Owner)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.Owner = HumanResources.Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Document because HumanResources.Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_EmailAddress ON Person.EmailAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmailAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.Person  Person.EmailAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000198fe", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.EmailA", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.BusinessEntityID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.EmailAddress
          WHERE
            /* %JoinFKPK(Person.EmailAddress,Person.Person," = "," AND") */
            Person.EmailAddress.BusinessEntityID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.EmailAddress because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_EmailAddress ON Person.EmailAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmailAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insEmailAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.Person  Person.EmailAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019551", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.EmailA", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.BusinessEntityID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.EmailAddress because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [dEmployee] ON Employee
   WITH 
 EXECUTE AS CALLER  INSTEAD OF DELETE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN
        RAISERROR
            (N'Employees cannot be deleted. They can only be marked as not current.', -- Message
            10, -- Severity.
            1); -- State.

        -- Rollback any active or uncommittable transactions
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
    END;
END;

 
go


ENABLE TRIGGER [dEmployee] ON Employee
go

CREATE TRIGGER HumanResources.tU_Employee ON HumanResources.Employee FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Employee */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Sales.SalesPerson on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000a3613", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Sal", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /*  %JoinFKPK(Sales.SalesPerson,deleted," = "," AND") */
        Sales.SalesPerson.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because Sales.SalesPerson exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Purchasing.PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pur", FK_COLUMNS="EmployeeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.EmployeeID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  HumanResources.JobCandidate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.JobCandidate
      WHERE
        /*  %JoinFKPK(HumanResources.JobCandidate,deleted," = "," AND") */
        HumanResources.JobCandidate.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because HumanResources.JobCandidate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  HumanResources.EmployeePayHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeePayHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeePayHistory,deleted," = "," AND") */
        HumanResources.EmployeePayHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because HumanResources.EmployeePayHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  HumanResources.EmployeeDepartmentHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeeDepartmentHistory,deleted," = "," AND") */
        HumanResources.EmployeeDepartmentHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because HumanResources.EmployeeDepartmentHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Production.Document on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Production", CHILD_TABLE="Document"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pro", FK_COLUMNS="Owner" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Document
      WHERE
        /*  %JoinFKPK(Production.Document,deleted," = "," AND") */
        Production.Document.Owner = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Employee because Production.Document exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  HumanResources.Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_HumanResource", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.BusinessEntityID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.Employee because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_2904 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Production.Document on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013345", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Production", CHILD_TABLE="Document"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pro", FK_COLUMNS="Owner" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Document
      WHERE
        /*  %JoinFKPK(Production.Document,deleted," = "," AND") */
        Production.Document.Owner = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because Production.Document exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_2908 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.Person  HumanResources.Employee on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00019880", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_HumanResource", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.BusinessEntityID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM HumanResources.Employee
          WHERE
            /* %JoinFKPK(HumanResources.Employee,Person.Person," = "," AND") */
            HumanResources.Employee.BusinessEntityID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.Employee because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_2909 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  HumanResources.EmployeeDepartmentHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017c0e", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeeDepartmentHistory,deleted," = "," AND") */
        HumanResources.EmployeeDepartmentHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because HumanResources.EmployeeDepartmentHistory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_2910 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  HumanResources.EmployeePayHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016f2d", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeePayHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeePayHistory,deleted," = "," AND") */
        HumanResources.EmployeePayHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because HumanResources.EmployeePayHistory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_2914 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  HumanResources.JobCandidate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000161dd", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.JobCandidate
      WHERE
        /*  %JoinFKPK(HumanResources.JobCandidate,deleted," = "," AND") */
        HumanResources.JobCandidate.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because HumanResources.JobCandidate exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_2975 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Purchasing.PurchaseOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000171eb", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pur", FK_COLUMNS="EmployeeID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.EmployeeID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.Trigger_3007 ON HumanResources.Employee FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Employee */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Sales.SalesPerson on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015020", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Sal", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /*  %JoinFKPK(Sales.SalesPerson,deleted," = "," AND") */
        Sales.SalesPerson.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Employee because Sales.SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tD_EmployeeDepartmentHistory ON HumanResources.EmployeeDepartmentHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmployeeDepartmentHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Shift  HumanResources.EmployeeDepartmentHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00055c47", PARENT_OWNER="HumanResources", PARENT_TABLE="Shift"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Shift_HumanR", FK_COLUMNS="ShiftID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Shift
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Shift," = "," AND") */
        deleted.ShiftID = HumanResources.Shift.ShiftID AND
        NOT EXISTS (
          SELECT * FROM HumanResources.EmployeeDepartmentHistory
          WHERE
            /* %JoinFKPK(HumanResources.EmployeeDepartmentHistory,HumanResources.Shift," = "," AND") */
            HumanResources.EmployeeDepartmentHistory.ShiftID = HumanResources.Shift.ShiftID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.EmployeeDepartmentHistory because HumanResources.Shift exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee  HumanResources.EmployeeDepartmentHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.BusinessEntityID = HumanResources.Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM HumanResources.EmployeeDepartmentHistory
          WHERE
            /* %JoinFKPK(HumanResources.EmployeeDepartmentHistory,HumanResources.Employee," = "," AND") */
            HumanResources.EmployeeDepartmentHistory.BusinessEntityID = HumanResources.Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.EmployeeDepartmentHistory because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Department  HumanResources.EmployeeDepartmentHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Department"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Department_H", FK_COLUMNS="DepartmentID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Department
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Department," = "," AND") */
        deleted.DepartmentID = HumanResources.Department.DepartmentID AND
        NOT EXISTS (
          SELECT * FROM HumanResources.EmployeeDepartmentHistory
          WHERE
            /* %JoinFKPK(HumanResources.EmployeeDepartmentHistory,HumanResources.Department," = "," AND") */
            HumanResources.EmployeeDepartmentHistory.DepartmentID = HumanResources.Department.DepartmentID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.EmployeeDepartmentHistory because HumanResources.Department exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tU_EmployeeDepartmentHistory ON HumanResources.EmployeeDepartmentHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmployeeDepartmentHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insDepartmentID smallint, 
           @insShiftID tinyint, 
           @insStartDate date,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Shift  HumanResources.EmployeeDepartmentHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004fdca", PARENT_OWNER="HumanResources", PARENT_TABLE="Shift"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Shift_HumanR", FK_COLUMNS="ShiftID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShiftID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Shift
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Shift) */
          inserted.ShiftID = HumanResources.Shift.ShiftID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.EmployeeDepartmentHistory because HumanResources.Shift does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  HumanResources.EmployeeDepartmentHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.BusinessEntityID = HumanResources.Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.EmployeeDepartmentHistory because HumanResources.Employee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Department  HumanResources.EmployeeDepartmentHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Department"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Department_H", FK_COLUMNS="DepartmentID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DepartmentID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Department
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Department) */
          inserted.DepartmentID = HumanResources.Department.DepartmentID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.EmployeeDepartmentHistory because HumanResources.Department does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tD_EmployeePayHistory ON HumanResources.EmployeePayHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmployeePayHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  HumanResources.EmployeePayHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001d680", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.BusinessEntityID = HumanResources.Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM HumanResources.EmployeePayHistory
          WHERE
            /* %JoinFKPK(HumanResources.EmployeePayHistory,HumanResources.Employee," = "," AND") */
            HumanResources.EmployeePayHistory.BusinessEntityID = HumanResources.Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.EmployeePayHistory because HumanResources.Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tU_EmployeePayHistory ON HumanResources.EmployeePayHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmployeePayHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insRateChangeDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  HumanResources.EmployeePayHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001c141", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.BusinessEntityID = HumanResources.Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.EmployeePayHistory because HumanResources.Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Illustration ON Production.Illustration FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Illustration */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Illustration  Production.ProductModelIllustration on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016b30", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Illustration_Pro", FK_COLUMNS="IllustrationID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.IllustrationID = deleted.IllustrationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Illustration because Production.ProductModelIllustration exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Illustration ON Production.Illustration FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Illustration */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insIllustrationID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Illustration  Production.ProductModelIllustration on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000193fa", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Illustration_Pro", FK_COLUMNS="IllustrationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(IllustrationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.IllustrationID = deleted.IllustrationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Illustration because Production.ProductModelIllustration exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tD_JobCandidate ON HumanResources.JobCandidate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on JobCandidate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Employee  HumanResources.JobCandidate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001cc15", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.BusinessEntityID = HumanResources.Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM HumanResources.JobCandidate
          WHERE
            /* %JoinFKPK(HumanResources.JobCandidate,HumanResources.Employee," = "," AND") */
            HumanResources.JobCandidate.BusinessEntityID = HumanResources.Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last HumanResources.JobCandidate because HumanResources.Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tU_JobCandidate ON HumanResources.JobCandidate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on JobCandidate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insJobCandidateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  HumanResources.JobCandidate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001d90d", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="HumanResources", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Hum", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.BusinessEntityID = HumanResources.Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.BusinessEntityID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update HumanResources.JobCandidate because HumanResources.Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Location ON Production.Location FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Location */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Location  Production.WorkOrderRouting on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028aca", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Location because Production.WorkOrderRouting exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Location  Production.ProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Location because Production.ProductInventory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Location ON Production.Location FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Location */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insLocationID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Location  Production.WorkOrderRouting on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c2f4", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Location because Production.WorkOrderRouting exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Location  Production.ProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Location because Production.ProductInventory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_Password ON Person.Password FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Password */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.Person  Person.Password on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00018708", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Passwo", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.BusinessEntityID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.Password
          WHERE
            /* %JoinFKPK(Person.Password,Person.Person," = "," AND") */
            Person.Password.BusinessEntityID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.Password because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_Password ON Person.Password FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Password */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.Person  Person.Password on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018c0e", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Passwo", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.BusinessEntityID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.Password because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iuPerson] ON Person
   WITH 
 EXECUTE AS CALLER  AFTER INSERT,UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

 
go


ENABLE TRIGGER [iuPerson] ON Person
go

CREATE TRIGGER Person.tD_Person ON Person.Person FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Person */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.Person  Person.PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0009c6fe", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Person", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.PersonPhone
      WHERE
        /*  %JoinFKPK(Person.PersonPhone,deleted," = "," AND") */
        Person.PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because Person.PersonPhone exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Sales.PersonCreditCard on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.PersonC", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.PersonCreditCard
      WHERE
        /*  %JoinFKPK(Sales.PersonCreditCard,deleted," = "," AND") */
        Sales.PersonCreditCard.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because Sales.PersonCreditCard exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Person.Password on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Passwo", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.Password
      WHERE
        /*  %JoinFKPK(Person.Password,deleted," = "," AND") */
        Person.Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because Person.Password exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  HumanResources.Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_HumanResource", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /*  %JoinFKPK(HumanResources.Employee,deleted," = "," AND") */
        HumanResources.Employee.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because HumanResources.Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Person.EmailAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.EmailA", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.EmailAddress
      WHERE
        /*  %JoinFKPK(Person.EmailAddress,deleted," = "," AND") */
        Person.EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because Person.EmailAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Sales.Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.Custome", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because Sales.Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Person.BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Busine", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityContact
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityContact,deleted," = "," AND") */
        Person.BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.Person because Person.BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Person.Person on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,Person.BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.Person
          WHERE
            /* %JoinFKPK(Person.Person,Person.BusinessEntity," = "," AND") */
            Person.Person.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.Person because Person.BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_Person ON Person.Person FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Person */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.Person  Person.PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000a829d", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Person", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.PersonPhone
      WHERE
        /*  %JoinFKPK(Person.PersonPhone,deleted," = "," AND") */
        Person.PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because Person.PersonPhone exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Sales.PersonCreditCard on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.PersonC", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.PersonCreditCard
      WHERE
        /*  %JoinFKPK(Sales.PersonCreditCard,deleted," = "," AND") */
        Sales.PersonCreditCard.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because Sales.PersonCreditCard exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Person.Password on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Passwo", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.Password
      WHERE
        /*  %JoinFKPK(Person.Password,deleted," = "," AND") */
        Person.Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because Person.Password exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  HumanResources.Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="HumanResources", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_HumanResource", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /*  %JoinFKPK(HumanResources.Employee,deleted," = "," AND") */
        HumanResources.Employee.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because HumanResources.Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Person.EmailAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.EmailA", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.EmailAddress
      WHERE
        /*  %JoinFKPK(Person.EmailAddress,deleted," = "," AND") */
        Person.EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because Person.EmailAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Sales.Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.Custome", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because Sales.Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Person.BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Busine", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.BusinessEntityContact
      WHERE
        /*  %JoinFKPK(Person.BusinessEntityContact,deleted," = "," AND") */
        Person.BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.Person because Person.BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Person.Person on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Person", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Perso", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,Person.BusinessEntity) */
          inserted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.Person because Person.BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_PersonCreditCard ON Sales.PersonCreditCard FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonCreditCard */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.CreditCard  Sales.PersonCreditCard on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00031c08", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Pers", FK_COLUMNS="CreditCardID" */
    IF EXISTS (SELECT * FROM deleted,Sales.CreditCard
      WHERE
        /* %JoinFKPK(deleted,Sales.CreditCard," = "," AND") */
        deleted.CreditCardID = Sales.CreditCard.CreditCardID AND
        NOT EXISTS (
          SELECT * FROM Sales.PersonCreditCard
          WHERE
            /* %JoinFKPK(Sales.PersonCreditCard,Sales.CreditCard," = "," AND") */
            Sales.PersonCreditCard.CreditCardID = Sales.CreditCard.CreditCardID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.PersonCreditCard because Sales.CreditCard exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Sales.PersonCreditCard on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.PersonC", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.BusinessEntityID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.PersonCreditCard
          WHERE
            /* %JoinFKPK(Sales.PersonCreditCard,Person.Person," = "," AND") */
            Sales.PersonCreditCard.BusinessEntityID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.PersonCreditCard because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_PersonCreditCard ON Sales.PersonCreditCard FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonCreditCard */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insCreditCardID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.CreditCard  Sales.PersonCreditCard on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00032fb3", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Pers", FK_COLUMNS="CreditCardID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.CreditCard
        WHERE
          /* %JoinFKPK(inserted,Sales.CreditCard) */
          inserted.CreditCardID = Sales.CreditCard.CreditCardID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.PersonCreditCard because Sales.CreditCard does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Sales.PersonCreditCard on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Sales", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Sales.PersonC", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.BusinessEntityID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.PersonCreditCard because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_PersonPhone ON Person.PersonPhone FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonPhone */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.PhoneNumberType  Person.PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00031e41", PARENT_OWNER="Person", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.PhoneNumberType_Pers", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (SELECT * FROM deleted,Person.PhoneNumberType
      WHERE
        /* %JoinFKPK(deleted,Person.PhoneNumberType," = "," AND") */
        deleted.PhoneNumberTypeID = Person.PhoneNumberType.PhoneNumberTypeID AND
        NOT EXISTS (
          SELECT * FROM Person.PersonPhone
          WHERE
            /* %JoinFKPK(Person.PersonPhone,Person.PhoneNumberType," = "," AND") */
            Person.PersonPhone.PhoneNumberTypeID = Person.PhoneNumberType.PhoneNumberTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.PersonPhone because Person.PhoneNumberType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Person  Person.PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Person", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.Person
      WHERE
        /* %JoinFKPK(deleted,Person.Person," = "," AND") */
        deleted.BusinessEntityID = Person.Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.PersonPhone
          WHERE
            /* %JoinFKPK(Person.PersonPhone,Person.Person," = "," AND") */
            Person.PersonPhone.BusinessEntityID = Person.Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.PersonPhone because Person.Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_PersonPhone ON Person.PersonPhone FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonPhone */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPhoneNumber Phone, 
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.PhoneNumberType  Person.PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00033384", PARENT_OWNER="Person", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.PhoneNumberType_Pers", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.PhoneNumberType
        WHERE
          /* %JoinFKPK(inserted,Person.PhoneNumberType) */
          inserted.PhoneNumberTypeID = Person.PhoneNumberType.PhoneNumberTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.PersonPhone because Person.PhoneNumberType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.Person  Person.PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Person"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Person_Person.Person", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Person
        WHERE
          /* %JoinFKPK(inserted,Person.Person) */
          inserted.BusinessEntityID = Person.Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.PersonPhone because Person.Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_PhoneNumberType ON Person.PhoneNumberType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PhoneNumberType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.PhoneNumberType  Person.PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000144a6", PARENT_OWNER="Person", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.PhoneNumberType_Pers", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.PersonPhone
      WHERE
        /*  %JoinFKPK(Person.PersonPhone,deleted," = "," AND") */
        Person.PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.PhoneNumberType because Person.PersonPhone exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_PhoneNumberType ON Person.PhoneNumberType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PhoneNumberType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.PhoneNumberType  Person.PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00016686", PARENT_OWNER="Person", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="Person", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.PhoneNumberType_Pers", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.PersonPhone
      WHERE
        /*  %JoinFKPK(Person.PersonPhone,deleted," = "," AND") */
        Person.PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.PhoneNumberType because Person.PersonPhone exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Product ON Production.Product FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Product */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.WorkOrder on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0017f2e1", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.WorkOrder exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.TransactionHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.TransactionHistory
      WHERE
        /*  %JoinFKPK(Production.TransactionHistory,deleted," = "," AND") */
        Production.TransactionHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.TransactionHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Sales.SpecialOfferProduct on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sp", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(Sales.SpecialOfferProduct,deleted," = "," AND") */
        Sales.SpecialOfferProduct.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Sales.SpecialOfferProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Sales.ShoppingCartItem on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sh", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.ShoppingCartItem
      WHERE
        /*  %JoinFKPK(Sales.ShoppingCartItem,deleted," = "," AND") */
        Sales.ShoppingCartItem.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Sales.ShoppingCartItem exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.PurchaseOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Purchasing.ProductVendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductReview on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductReview
      WHERE
        /*  %JoinFKPK(Production.ProductReview,deleted," = "," AND") */
        Production.ProductReview.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductReview exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductProductPhoto on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductProductPhoto exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductListPriceHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductListPriceHistory
      WHERE
        /*  %JoinFKPK(Production.ProductListPriceHistory,deleted," = "," AND") */
        Production.ProductListPriceHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductListPriceHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductInventory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductDocument on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductDocument exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductCostHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductCostHistory
      WHERE
        /*  %JoinFKPK(Production.ProductCostHistory,deleted," = "," AND") */
        Production.ProductCostHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductCostHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ComponentID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ComponentID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductAssemblyID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ProductAssemblyID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductSubcategory  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductSubcatego", FK_COLUMNS="ProductSubcategoryID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductSubcategory
      WHERE
        /* %JoinFKPK(deleted,Production.ProductSubcategory," = "," AND") */
        deleted.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.ProductSubcategory," = "," AND") */
            Production.Product.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.ProductSubcategory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductModel
      WHERE
        /* %JoinFKPK(deleted,Production.ProductModel," = "," AND") */
        deleted.ProductModelID = Production.ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.ProductModel," = "," AND") */
            Production.Product.ProductModelID = Production.ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.ProductModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="WeightUnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.WeightUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.UnitMeasure," = "," AND") */
            Production.Product.WeightUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="SizeUnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.SizeUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.UnitMeasure," = "," AND") */
            Production.Product.SizeUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.UnitMeasure exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Product ON Production.Product FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Product */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.WorkOrder on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0019ecda", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.WorkOrder exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.TransactionHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.TransactionHistory
      WHERE
        /*  %JoinFKPK(Production.TransactionHistory,deleted," = "," AND") */
        Production.TransactionHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.TransactionHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Sales.SpecialOfferProduct on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sp", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(Sales.SpecialOfferProduct,deleted," = "," AND") */
        Sales.SpecialOfferProduct.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Sales.SpecialOfferProduct exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Sales.ShoppingCartItem on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sh", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.ShoppingCartItem
      WHERE
        /*  %JoinFKPK(Sales.ShoppingCartItem,deleted," = "," AND") */
        Sales.ShoppingCartItem.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Sales.ShoppingCartItem exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.PurchaseOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Purchasing.ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductReview on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductReview
      WHERE
        /*  %JoinFKPK(Production.ProductReview,deleted," = "," AND") */
        Production.ProductReview.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductReview exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductProductPhoto on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductProductPhoto exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductListPriceHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductListPriceHistory
      WHERE
        /*  %JoinFKPK(Production.ProductListPriceHistory,deleted," = "," AND") */
        Production.ProductListPriceHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductListPriceHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductInventory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductDocument on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductDocument exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductCostHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductCostHistory
      WHERE
        /*  %JoinFKPK(Production.ProductCostHistory,deleted," = "," AND") */
        Production.ProductCostHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductCostHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ComponentID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ComponentID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductAssemblyID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ProductAssemblyID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductSubcategory  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductSubcatego", FK_COLUMNS="ProductSubcategoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductSubcategory
        WHERE
          /* %JoinFKPK(inserted,Production.ProductSubcategory) */
          inserted.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductSubcategoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.ProductSubcategory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductModel
        WHERE
          /* %JoinFKPK(inserted,Production.ProductModel) */
          inserted.ProductModelID = Production.ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductModelID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.ProductModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="WeightUnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(WeightUnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.WeightUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.WeightUnitMeasureCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="SizeUnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SizeUnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.SizeUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SizeUnitMeasureCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductCategory ON Production.ProductCategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductCategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductCategory  Production.ProductSubcategory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016c26", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductCategory_", FK_COLUMNS="ProductCategoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductSubcategory
      WHERE
        /*  %JoinFKPK(Production.ProductSubcategory,deleted," = "," AND") */
        Production.ProductSubcategory.ProductCategoryID = deleted.ProductCategoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductCategory because Production.ProductSubcategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductCategory ON Production.ProductCategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductCategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductCategoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductCategory  Production.ProductSubcategory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00018f46", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductCategory_", FK_COLUMNS="ProductCategoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductCategoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductSubcategory
      WHERE
        /*  %JoinFKPK(Production.ProductSubcategory,deleted," = "," AND") */
        Production.ProductSubcategory.ProductCategoryID = deleted.ProductCategoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductCategory because Production.ProductSubcategory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductCostHistory ON Production.ProductCostHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductCostHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductCostHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a469", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductCostHistory
          WHERE
            /* %JoinFKPK(Production.ProductCostHistory,Production.Product," = "," AND") */
            Production.ProductCostHistory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductCostHistory because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductCostHistory ON Production.ProductCostHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductCostHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductCostHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001ac37", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductCostHistory because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductDescription ON Production.ProductDescription FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductDescription */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductDescription  Production.ProductModelProductDescription on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00018bcf", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductDescripti", FK_COLUMNS="ProductDescriptionID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescription
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescription,deleted," = "," AND") */
        Production.ProductModelProductDescription.ProductDescriptionID = deleted.ProductDescriptionID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductDescription because Production.ProductModelProductDescription exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductDescription ON Production.ProductDescription FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductDescription */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductDescriptionID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductDescription  Production.ProductModelProductDescription on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b3eb", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductDescripti", FK_COLUMNS="ProductDescriptionID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductDescriptionID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescription
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescription,deleted," = "," AND") */
        Production.ProductModelProductDescription.ProductDescriptionID = deleted.ProductDescriptionID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductDescription because Production.ProductModelProductDescription exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductDocument ON Production.ProductDocument FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductDocument */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Document  Production.ProductDocument on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00033bcc", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Document_Product", FK_COLUMNS="DocumentNode" */
    IF EXISTS (SELECT * FROM deleted,Production.Document
      WHERE
        /* %JoinFKPK(deleted,Production.Document," = "," AND") */
        deleted.DocumentNode = Production.Document.DocumentNode AND
        NOT EXISTS (
          SELECT * FROM Production.ProductDocument
          WHERE
            /* %JoinFKPK(Production.ProductDocument,Production.Document," = "," AND") */
            Production.ProductDocument.DocumentNode = Production.Document.DocumentNode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductDocument because Production.Document exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductDocument on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductDocument
          WHERE
            /* %JoinFKPK(Production.ProductDocument,Production.Product," = "," AND") */
            Production.ProductDocument.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductDocument because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductDocument ON Production.ProductDocument FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductDocument */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insDocumentNode hierarchyid,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Document  Production.ProductDocument on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00032995", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Document_Product", FK_COLUMNS="DocumentNode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DocumentNode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Document
        WHERE
          /* %JoinFKPK(inserted,Production.Document) */
          inserted.DocumentNode = Production.Document.DocumentNode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductDocument because Production.Document does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductDocument on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductDocument because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductInventory ON Production.ProductInventory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductInventory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00033e32", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductInventory
          WHERE
            /* %JoinFKPK(Production.ProductInventory,Production.Product," = "," AND") */
            Production.ProductInventory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductInventory because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Location  Production.ProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
    IF EXISTS (SELECT * FROM deleted,Production.Location
      WHERE
        /* %JoinFKPK(deleted,Production.Location," = "," AND") */
        deleted.LocationID = Production.Location.LocationID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductInventory
          WHERE
            /* %JoinFKPK(Production.ProductInventory,Production.Location," = "," AND") */
            Production.ProductInventory.LocationID = Production.Location.LocationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductInventory because Production.Location exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductInventory ON Production.ProductInventory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductInventory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insLocationID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00032d31", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductInventory because Production.Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Location  Production.ProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Location
        WHERE
          /* %JoinFKPK(inserted,Production.Location) */
          inserted.LocationID = Production.Location.LocationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductInventory because Production.Location does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductListPriceHistory ON Production.ProductListPriceHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductListPriceHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductListPriceHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001b7dc", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductListPriceHistory
          WHERE
            /* %JoinFKPK(Production.ProductListPriceHistory,Production.Product," = "," AND") */
            Production.ProductListPriceHistory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductListPriceHistory because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductListPriceHistory ON Production.ProductListPriceHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductListPriceHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductListPriceHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a84c", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductListPriceHistory because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductModel ON Production.ProductModel FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModel */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelProductDescription on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00040d18", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescription
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescription,deleted," = "," AND") */
        Production.ProductModelProductDescription.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductModel because Production.ProductModelProductDescription exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelIllustration on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductModel because Production.ProductModelIllustration exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductModel because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductModel ON Production.ProductModel FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModel */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelProductDescription on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000484d3", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescription
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescription,deleted," = "," AND") */
        Production.ProductModelProductDescription.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductModel because Production.ProductModelProductDescription exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelIllustration on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductModel because Production.ProductModelIllustration exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductModel because Production.Product exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductModelIllustration ON Production.ProductModelIllustration FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModelIllustration */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Illustration  Production.ProductModelIllustration on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00039588", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Illustration_Pro", FK_COLUMNS="IllustrationID" */
    IF EXISTS (SELECT * FROM deleted,Production.Illustration
      WHERE
        /* %JoinFKPK(deleted,Production.Illustration," = "," AND") */
        deleted.IllustrationID = Production.Illustration.IllustrationID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelIllustration
          WHERE
            /* %JoinFKPK(Production.ProductModelIllustration,Production.Illustration," = "," AND") */
            Production.ProductModelIllustration.IllustrationID = Production.Illustration.IllustrationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelIllustration because Production.Illustration exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelIllustration on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductModel
      WHERE
        /* %JoinFKPK(deleted,Production.ProductModel," = "," AND") */
        deleted.ProductModelID = Production.ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelIllustration
          WHERE
            /* %JoinFKPK(Production.ProductModelIllustration,Production.ProductModel," = "," AND") */
            Production.ProductModelIllustration.ProductModelID = Production.ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelIllustration because Production.ProductModel exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductModelIllustration ON Production.ProductModelIllustration FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModelIllustration */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int, 
           @insIllustrationID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Illustration  Production.ProductModelIllustration on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00036196", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Illustration_Pro", FK_COLUMNS="IllustrationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(IllustrationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Illustration
        WHERE
          /* %JoinFKPK(inserted,Production.Illustration) */
          inserted.IllustrationID = Production.Illustration.IllustrationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelIllustration because Production.Illustration does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelIllustration on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductModel
        WHERE
          /* %JoinFKPK(inserted,Production.ProductModel) */
          inserted.ProductModelID = Production.ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelIllustration because Production.ProductModel does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductModelProductDescriptionCulture ON Production.ProductModelProductDescription FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModelProductDescription */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelProductDescription on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005aea9", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductModel
      WHERE
        /* %JoinFKPK(deleted,Production.ProductModel," = "," AND") */
        deleted.ProductModelID = Production.ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelProductDescription
          WHERE
            /* %JoinFKPK(Production.ProductModelProductDescription,Production.ProductModel," = "," AND") */
            Production.ProductModelProductDescription.ProductModelID = Production.ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelProductDescription because Production.ProductModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Culture  Production.ProductModelProductDescription on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Culture_Producti", FK_COLUMNS="CultureID" */
    IF EXISTS (SELECT * FROM deleted,Production.Culture
      WHERE
        /* %JoinFKPK(deleted,Production.Culture," = "," AND") */
        deleted.CultureID = Production.Culture.CultureID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelProductDescription
          WHERE
            /* %JoinFKPK(Production.ProductModelProductDescription,Production.Culture," = "," AND") */
            Production.ProductModelProductDescription.CultureID = Production.Culture.CultureID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelProductDescription because Production.Culture exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductDescription  Production.ProductModelProductDescription on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductDescripti", FK_COLUMNS="ProductDescriptionID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductDescription
      WHERE
        /* %JoinFKPK(deleted,Production.ProductDescription," = "," AND") */
        deleted.ProductDescriptionID = Production.ProductDescription.ProductDescriptionID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelProductDescription
          WHERE
            /* %JoinFKPK(Production.ProductModelProductDescription,Production.ProductDescription," = "," AND") */
            Production.ProductModelProductDescription.ProductDescriptionID = Production.ProductDescription.ProductDescriptionID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelProductDescription because Production.ProductDescription exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductModelProductDescriptionCulture ON Production.ProductModelProductDescription FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModelProductDescription */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int, 
           @insProductDescriptionID int, 
           @insCultureID nchar(6),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelProductDescription on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00054493", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductModel_Pro", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductModel
        WHERE
          /* %JoinFKPK(inserted,Production.ProductModel) */
          inserted.ProductModelID = Production.ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelProductDescription because Production.ProductModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Culture  Production.ProductModelProductDescription on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Culture_Producti", FK_COLUMNS="CultureID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CultureID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Culture
        WHERE
          /* %JoinFKPK(inserted,Production.Culture) */
          inserted.CultureID = Production.Culture.CultureID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelProductDescription because Production.Culture does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductDescription  Production.ProductModelProductDescription on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescription"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductDescripti", FK_COLUMNS="ProductDescriptionID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductDescriptionID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductDescription
        WHERE
          /* %JoinFKPK(inserted,Production.ProductDescription) */
          inserted.ProductDescriptionID = Production.ProductDescription.ProductDescriptionID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelProductDescription because Production.ProductDescription does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductPhoto ON Production.ProductPhoto FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductPhoto */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductPhoto  Production.ProductProductPhoto on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016708", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductPhoto_Pro", FK_COLUMNS="ProductPhotoID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductPhotoID = deleted.ProductPhotoID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductPhoto because Production.ProductProductPhoto exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductPhoto ON Production.ProductPhoto FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductPhoto */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductPhotoID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductPhoto  Production.ProductProductPhoto on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000181f4", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductPhoto_Pro", FK_COLUMNS="ProductPhotoID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductPhotoID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductPhotoID = deleted.ProductPhotoID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductPhoto because Production.ProductProductPhoto exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductProductPhoto ON Production.ProductProductPhoto FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductProductPhoto */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductPhoto  Production.ProductProductPhoto on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003646d", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductPhoto_Pro", FK_COLUMNS="ProductPhotoID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductPhoto
      WHERE
        /* %JoinFKPK(deleted,Production.ProductPhoto," = "," AND") */
        deleted.ProductPhotoID = Production.ProductPhoto.ProductPhotoID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductProductPhoto
          WHERE
            /* %JoinFKPK(Production.ProductProductPhoto,Production.ProductPhoto," = "," AND") */
            Production.ProductProductPhoto.ProductPhotoID = Production.ProductPhoto.ProductPhotoID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductProductPhoto because Production.ProductPhoto exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductProductPhoto on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductProductPhoto
          WHERE
            /* %JoinFKPK(Production.ProductProductPhoto,Production.Product," = "," AND") */
            Production.ProductProductPhoto.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductProductPhoto because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductProductPhoto ON Production.ProductProductPhoto FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductProductPhoto */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insProductPhotoID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductPhoto  Production.ProductProductPhoto on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000346d2", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductPhoto_Pro", FK_COLUMNS="ProductPhotoID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductPhotoID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductPhoto
        WHERE
          /* %JoinFKPK(inserted,Production.ProductPhoto) */
          inserted.ProductPhotoID = Production.ProductPhoto.ProductPhotoID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductProductPhoto because Production.ProductPhoto does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductProductPhoto on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductProductPhoto because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductReview ON Production.ProductReview FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductReview */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductReview on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a7b9", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductReview
          WHERE
            /* %JoinFKPK(Production.ProductReview,Production.Product," = "," AND") */
            Production.ProductReview.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductReview because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductReview ON Production.ProductReview FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductReview */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductReviewID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductReview on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001988c", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductReview because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductSubcategory ON Production.ProductSubcategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductSubcategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductSubcategory  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00030957", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductSubcatego", FK_COLUMNS="ProductSubcategoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductSubcategoryID = deleted.ProductSubcategoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductSubcategory because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductCategory  Production.ProductSubcategory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductCategory_", FK_COLUMNS="ProductCategoryID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductCategory
      WHERE
        /* %JoinFKPK(deleted,Production.ProductCategory," = "," AND") */
        deleted.ProductCategoryID = Production.ProductCategory.ProductCategoryID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductSubcategory
          WHERE
            /* %JoinFKPK(Production.ProductSubcategory,Production.ProductCategory," = "," AND") */
            Production.ProductSubcategory.ProductCategoryID = Production.ProductCategory.ProductCategoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductSubcategory because Production.ProductCategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductSubcategory ON Production.ProductSubcategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductSubcategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductSubcategoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductSubcategory  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00031021", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductSubcatego", FK_COLUMNS="ProductSubcategoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductSubcategoryID = deleted.ProductSubcategoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductSubcategory because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductCategory  Production.ProductSubcategory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ProductCategory_", FK_COLUMNS="ProductCategoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductCategoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductCategory
        WHERE
          /* %JoinFKPK(inserted,Production.ProductCategory) */
          inserted.ProductCategoryID = Production.ProductCategory.ProductCategoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductSubcategory because Production.ProductCategory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tD_ProductVendor ON Purchasing.ProductVendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductVendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004cdec", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.Vendor
      WHERE
        /* %JoinFKPK(deleted,Purchasing.Vendor," = "," AND") */
        deleted.BusinessEntityID = Purchasing.Vendor.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.ProductVendor
          WHERE
            /* %JoinFKPK(Purchasing.ProductVendor,Purchasing.Vendor," = "," AND") */
            Purchasing.ProductVendor.BusinessEntityID = Purchasing.Vendor.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.ProductVendor because Purchasing.Vendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Purchasing.ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Purc", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Purchasing.ProductVendor
          WHERE
            /* %JoinFKPK(Purchasing.ProductVendor,Production.UnitMeasure," = "," AND") */
            Purchasing.ProductVendor.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.ProductVendor because Production.UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.ProductVendor
          WHERE
            /* %JoinFKPK(Purchasing.ProductVendor,Production.Product," = "," AND") */
            Purchasing.ProductVendor.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.ProductVendor because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_ProductVendor ON Purchasing.ProductVendor FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductVendor */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004d7fe", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.Vendor
        WHERE
          /* %JoinFKPK(inserted,Purchasing.Vendor) */
          inserted.BusinessEntityID = Purchasing.Vendor.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.ProductVendor because Purchasing.Vendor does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Purchasing.ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Purc", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.ProductVendor because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.ProductVendor because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iPurchaseOrderDetail] ON PurchaseOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER INSERT 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory]
            ([ProductID]
            ,[ReferenceOrderID]
            ,[ReferenceOrderLineID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[PurchaseOrderID]
            ,inserted.[PurchaseOrderDetailID]
            ,'P'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,inserted.[UnitPrice]
        FROM inserted 
            INNER JOIN [Purchasing].[PurchaseOrderHeader] 
            ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID];

        -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
        -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Purchasing].[PurchaseOrderHeader]
        SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
            (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                FROM [Purchasing].[PurchaseOrderDetail]
                WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
        WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN (SELECT inserted.[PurchaseOrderID] FROM inserted);
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iPurchaseOrderDetail] ON PurchaseOrderDetail
go

CREATE TRIGGER [uPurchaseOrderDetail] ON PurchaseOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice])
        -- Insert record into TransactionHistory 
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[PurchaseOrderID]
                ,inserted.[PurchaseOrderDetailID]
                ,'P'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Purchasing].[PurchaseOrderDetail] 
                ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID];

            -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
            -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
                (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                    FROM [Purchasing].[PurchaseOrderDetail]
                    WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                        = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

            UPDATE [Purchasing].[PurchaseOrderDetail]
            SET [Purchasing].[PurchaseOrderDetail].[ModifiedDate] = GETDATE()
            FROM inserted
            WHERE inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID]
                AND inserted.[PurchaseOrderDetailID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderDetailID];
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uPurchaseOrderDetail] ON PurchaseOrderDetail
go

CREATE TRIGGER Purchasing.tD_PurchaseOrderDetail ON Purchasing.PurchaseOrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00038440", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.PurchaseOrderHea", FK_COLUMNS="PurchaseOrderID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /* %JoinFKPK(deleted,Purchasing.PurchaseOrderHeader," = "," AND") */
        deleted.PurchaseOrderID = Purchasing.PurchaseOrderHeader.PurchaseOrderID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderDetail
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderDetail,Purchasing.PurchaseOrderHeader," = "," AND") */
            Purchasing.PurchaseOrderDetail.PurchaseOrderID = Purchasing.PurchaseOrderHeader.PurchaseOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderDetail because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.PurchaseOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderDetail
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderDetail,Production.Product," = "," AND") */
            Purchasing.PurchaseOrderDetail.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderDetail because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_PurchaseOrderDetail ON Purchasing.PurchaseOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int, 
           @insPurchaseOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.PurchaseOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a6e2", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Purchasi", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderDetail because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_2973 ON Purchasing.PurchaseOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int, 
           @insPurchaseOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001cd82", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.PurchaseOrderHea", FK_COLUMNS="PurchaseOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PurchaseOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.PurchaseOrderHeader
        WHERE
          /* %JoinFKPK(inserted,Purchasing.PurchaseOrderHeader) */
          inserted.PurchaseOrderID = Purchasing.PurchaseOrderHeader.PurchaseOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderDetail because Purchasing.PurchaseOrderHeader does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [uPurchaseOrderHeader] ON PurchaseOrderHeader
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[RevisionNumber] = 
                [Purchasing].[PurchaseOrderHeader].[RevisionNumber] + 1
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN 
                (SELECT inserted.[PurchaseOrderID] FROM inserted);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uPurchaseOrderHeader] ON PurchaseOrderHeader
go

CREATE TRIGGER Purchasing.tD_PurchaseOrderHeader ON Purchasing.PurchaseOrderHeader FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00067632", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.PurchaseOrderHea", FK_COLUMNS="PurchaseOrderID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.PurchaseOrderID = deleted.PurchaseOrderID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.PurchaseOrderHeader because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Purch", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.ShipMethod
      WHERE
        /* %JoinFKPK(deleted,Purchasing.ShipMethod," = "," AND") */
        deleted.ShipMethodID = Purchasing.ShipMethod.ShipMethodID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderHeader,Purchasing.ShipMethod," = "," AND") */
            Purchasing.PurchaseOrderHeader.ShipMethodID = Purchasing.ShipMethod.ShipMethodID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderHeader because Purchasing.ShipMethod exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="VendorID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.Vendor
      WHERE
        /* %JoinFKPK(deleted,Purchasing.Vendor," = "," AND") */
        deleted.VendorID = Purchasing.Vendor.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderHeader,Purchasing.Vendor," = "," AND") */
            Purchasing.PurchaseOrderHeader.VendorID = Purchasing.Vendor.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderHeader because Purchasing.Vendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Purchasing.PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pur", FK_COLUMNS="EmployeeID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.EmployeeID = HumanResources.Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderHeader,HumanResources.Employee," = "," AND") */
            Purchasing.PurchaseOrderHeader.EmployeeID = HumanResources.Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderHeader because HumanResources.Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_PurchaseOrderHeader ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017e2a", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.PurchaseOrderHea", FK_COLUMNS="PurchaseOrderID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PurchaseOrderID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.PurchaseOrderID = deleted.PurchaseOrderID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_2976 ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Purchasing.PurchaseOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001bc16", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Pur", FK_COLUMNS="EmployeeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(EmployeeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.EmployeeID = HumanResources.Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because HumanResources.Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_2978 ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a8a3", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="VendorID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(VendorID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.Vendor
        WHERE
          /* %JoinFKPK(inserted,Purchasing.Vendor) */
          inserted.VendorID = Purchasing.Vendor.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because Purchasing.Vendor does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_2982 ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b77d", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Purch", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.ShipMethod
        WHERE
          /* %JoinFKPK(inserted,Purchasing.ShipMethod) */
          inserted.ShipMethodID = Purchasing.ShipMethod.ShipMethodID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because Purchasing.ShipMethod does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iduSalesOrderDetail] ON SalesOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER DELETE,INSERT,UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- If inserting or updating these columns
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice]) OR UPDATE([UnitPriceDiscount]) 
        -- Insert record into TransactionHistory
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[SalesOrderID]
                ,inserted.[SalesOrderDetailID]
                ,'S'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] 
                ON inserted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID];

            UPDATE [Person].[Person] 
            SET [Demographics].modify('declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
                with data(/IndividualSurvey/TotalPurchaseYTD)[1] + sql:column ("inserted.LineTotal")') 
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] AS SOH
                ON inserted.[SalesOrderID] = SOH.[SalesOrderID] 
                INNER JOIN [Sales].[Customer] AS C
                ON SOH.[CustomerID] = C.[CustomerID]
            WHERE C.[PersonID] = [Person].[Person].[BusinessEntityID];
        END;

        -- Update SubTotal in SalesOrderHeader record. Note that this causes the 
        -- SalesOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Sales].[SalesOrderHeader]
        SET [Sales].[SalesOrderHeader].[SubTotal] = 
            (SELECT SUM([Sales].[SalesOrderDetail].[LineTotal])
                FROM [Sales].[SalesOrderDetail]
                WHERE [Sales].[SalesOrderHeader].[SalesOrderID] = [Sales].[SalesOrderDetail].[SalesOrderID])
        WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN (SELECT inserted.[SalesOrderID] FROM inserted);

        UPDATE [Person].[Person] 
        SET [Demographics].modify('declare default element namespace 
            "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
            with data(/IndividualSurvey/TotalPurchaseYTD)[1] - sql:column("deleted.LineTotal")') 
        FROM deleted 
            INNER JOIN [Sales].[SalesOrderHeader] 
            ON deleted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] 
            INNER JOIN [Sales].[Customer]
            ON [Sales].[Customer].[CustomerID] = [Sales].[SalesOrderHeader].[CustomerID]
        WHERE [Sales].[Customer].[PersonID] = [Person].[Person].[BusinessEntityID];
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iduSalesOrderDetail] ON SalesOrderDetail
go

CREATE TRIGGER Sales.tD_SalesOrderDetail ON Sales.SalesOrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SpecialOfferProduct  Sales.SalesOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a5cb", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOfferProduct_S", FK_COLUMNS="SpecialOfferID""ProductID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SpecialOfferProduct
      WHERE
        /* %JoinFKPK(deleted,Sales.SpecialOfferProduct," = "," AND") */
        deleted.SpecialOfferID = Sales.SpecialOfferProduct.SpecialOfferID AND
        deleted.ProductID = Sales.SpecialOfferProduct.ProductID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderDetail
          WHERE
            /* %JoinFKPK(Sales.SalesOrderDetail,Sales.SpecialOfferProduct," = "," AND") */
            Sales.SalesOrderDetail.SpecialOfferID = Sales.SpecialOfferProduct.SpecialOfferID AND
            Sales.SalesOrderDetail.ProductID = Sales.SpecialOfferProduct.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderDetail because Sales.SpecialOfferProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesOrderHeader  Sales.SalesOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesOrderHeader," = "," AND") */
        deleted.SalesOrderID = Sales.SalesOrderHeader.SalesOrderID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderDetail
          WHERE
            /* %JoinFKPK(Sales.SalesOrderDetail,Sales.SalesOrderHeader," = "," AND") */
            Sales.SalesOrderDetail.SalesOrderID = Sales.SalesOrderHeader.SalesOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderDetail because Sales.SalesOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesOrderDetail ON Sales.SalesOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int, 
           @insSalesOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SpecialOfferProduct  Sales.SalesOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00036957", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOfferProduct_S", FK_COLUMNS="SpecialOfferID""ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SpecialOfferID) OR
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SpecialOfferProduct
        WHERE
          /* %JoinFKPK(inserted,Sales.SpecialOfferProduct) */
          inserted.SpecialOfferID = Sales.SpecialOfferProduct.SpecialOfferID and
          inserted.ProductID = Sales.SpecialOfferProduct.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderDetail because Sales.SpecialOfferProduct does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesOrderHeader  Sales.SalesOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesOrderHeader
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesOrderHeader) */
          inserted.SalesOrderID = Sales.SalesOrderHeader.SalesOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderDetail because Sales.SalesOrderHeader does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [uSalesOrderHeader] ON SalesOrderHeader
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Sales].[SalesOrderHeader]
            SET [Sales].[SalesOrderHeader].[RevisionNumber] = 
                [Sales].[SalesOrderHeader].[RevisionNumber] + 1
            WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN 
                (SELECT inserted.[SalesOrderID] FROM inserted);
        END;

        -- Update the SalesPerson SalesYTD when SubTotal is updated
        IF UPDATE([SubTotal])
        BEGIN
            DECLARE @StartDate datetime,
                    @EndDate datetime

            SET @StartDate = [dbo].[ufnGetAccountingStartDate]();
            SET @EndDate = [dbo].[ufnGetAccountingEndDate]();

            UPDATE [Sales].[SalesPerson]
            SET [Sales].[SalesPerson].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesPerson].[BusinessEntityID] = [Sales].[SalesOrderHeader].[SalesPersonID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesPerson].[BusinessEntityID] 
                IN (SELECT DISTINCT inserted.[SalesPersonID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);

            -- Update the SalesTerritory SalesYTD when SubTotal is updated
            UPDATE [Sales].[SalesTerritory]
            SET [Sales].[SalesTerritory].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesTerritory].[TerritoryID] = [Sales].[SalesOrderHeader].[TerritoryID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesTerritory].[TerritoryID] 
                IN (SELECT DISTINCT inserted.[TerritoryID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uSalesOrderHeader] ON SalesOrderHeader
go

CREATE TRIGGER Sales.tD_SalesOrderHeader ON Sales.SalesOrderHeader FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesOrderHeader  Sales.SalesOrderHeaderSalesReason on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="000e63f6", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
    DELETE Sales.SalesOrderHeaderSalesReason
      FROM Sales.SalesOrderHeaderSalesReason,deleted
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeaderSalesReason,deleted," = "," AND") */
        Sales.SalesOrderHeaderSalesReason.SalesOrderID = deleted.SalesOrderID

    /* erwin Builtin Trigger */
    /* Sales.SalesOrderHeader  Sales.SalesOrderDetail on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
    DELETE Sales.SalesOrderDetail
      FROM Sales.SalesOrderDetail,deleted
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderDetail,deleted," = "," AND") */
        Sales.SalesOrderDetail.SalesOrderID = deleted.SalesOrderID

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesTerritory," = "," AND") */
        deleted.TerritoryID = Sales.SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Sales.SalesTerritory," = "," AND") */
            Sales.SalesOrderHeader.TerritoryID = Sales.SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Sales.SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchasing.ShipMethod  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Sales", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.ShipMethod
      WHERE
        /* %JoinFKPK(deleted,Purchasing.ShipMethod," = "," AND") */
        deleted.ShipMethodID = Purchasing.ShipMethod.ShipMethodID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Purchasing.ShipMethod," = "," AND") */
            Sales.SalesOrderHeader.ShipMethodID = Purchasing.ShipMethod.ShipMethodID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Purchasing.ShipMethod exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesPerson," = "," AND") */
        deleted.SalesPersonID = Sales.SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Sales.SalesPerson," = "," AND") */
            Sales.SalesOrderHeader.SalesPersonID = Sales.SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Sales.SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.Customer  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Customer_Sales.SalesO", FK_COLUMNS="CustomerID" */
    IF EXISTS (SELECT * FROM deleted,Sales.Customer
      WHERE
        /* %JoinFKPK(deleted,Sales.Customer," = "," AND") */
        deleted.CustomerID = Sales.Customer.CustomerID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Sales.Customer," = "," AND") */
            Sales.SalesOrderHeader.CustomerID = Sales.Customer.CustomerID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Sales.Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.CurrencyRate  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CurrencyRate_Sales.Sa", FK_COLUMNS="CurrencyRateID" */
    IF EXISTS (SELECT * FROM deleted,Sales.CurrencyRate
      WHERE
        /* %JoinFKPK(deleted,Sales.CurrencyRate," = "," AND") */
        deleted.CurrencyRateID = Sales.CurrencyRate.CurrencyRateID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Sales.CurrencyRate," = "," AND") */
            Sales.SalesOrderHeader.CurrencyRateID = Sales.CurrencyRate.CurrencyRateID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Sales.CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.CreditCard  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Sale", FK_COLUMNS="CreditCardID" */
    IF EXISTS (SELECT * FROM deleted,Sales.CreditCard
      WHERE
        /* %JoinFKPK(deleted,Sales.CreditCard," = "," AND") */
        deleted.CreditCardID = Sales.CreditCard.CreditCardID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Sales.CreditCard," = "," AND") */
            Sales.SalesOrderHeader.CreditCardID = Sales.CreditCard.CreditCardID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Sales.CreditCard exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Address  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="ShipToAddressID" */
    IF EXISTS (SELECT * FROM deleted,Person.Address
      WHERE
        /* %JoinFKPK(deleted,Person.Address," = "," AND") */
        deleted.ShipToAddressID = Person.Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Person.Address," = "," AND") */
            Sales.SalesOrderHeader.ShipToAddressID = Person.Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Person.Address exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.Address  Sales.SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="BillToAddressID" */
    IF EXISTS (SELECT * FROM deleted,Person.Address
      WHERE
        /* %JoinFKPK(deleted,Person.Address," = "," AND") */
        deleted.BillToAddressID = Person.Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeader
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeader,Person.Address," = "," AND") */
            Sales.SalesOrderHeader.BillToAddressID = Person.Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeader because Person.Address exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesOrderHeader ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesOrderHeader  Sales.SalesOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00015fc8", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderDetail
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderDetail,deleted," = "," AND") */
        Sales.SalesOrderDetail.SalesOrderID = deleted.SalesOrderID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.SalesOrderDetail exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2992 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.Address  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a78d", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="BillToAddressID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BillToAddressID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Address
        WHERE
          /* %JoinFKPK(inserted,Person.Address) */
          inserted.BillToAddressID = Person.Address.AddressID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Person.Address does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2993 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.Address  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019bcc", PARENT_OWNER="Person", PARENT_TABLE="Address"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.Address_Sales.SalesO", FK_COLUMNS="ShipToAddressID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipToAddressID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.Address
        WHERE
          /* %JoinFKPK(inserted,Person.Address) */
          inserted.ShipToAddressID = Person.Address.AddressID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Person.Address does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2994 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.CreditCard  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001c22e", PARENT_OWNER="Sales", PARENT_TABLE="CreditCard"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CreditCard_Sales.Sale", FK_COLUMNS="CreditCardID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.CreditCard
        WHERE
          /* %JoinFKPK(inserted,Sales.CreditCard) */
          inserted.CreditCardID = Sales.CreditCard.CreditCardID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.CreditCardID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.CreditCard does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2995 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.CurrencyRate  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001bb2a", PARENT_OWNER="Sales", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.CurrencyRate_Sales.Sa", FK_COLUMNS="CurrencyRateID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyRateID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.CurrencyRate
        WHERE
          /* %JoinFKPK(inserted,Sales.CurrencyRate) */
          inserted.CurrencyRateID = Sales.CurrencyRate.CurrencyRateID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.CurrencyRateID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.CurrencyRate does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2996 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Customer  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018f0e", PARENT_OWNER="Sales", PARENT_TABLE="Customer"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Customer_Sales.SalesO", FK_COLUMNS="CustomerID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CustomerID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.Customer
        WHERE
          /* %JoinFKPK(inserted,Sales.Customer) */
          inserted.CustomerID = Sales.Customer.CustomerID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.Customer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2997 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b8b4", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesPersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesPerson
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesPerson) */
          inserted.SalesPersonID = Sales.SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SalesPersonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2998 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.ShipMethod  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a819", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Sales", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.ShipMethod
        WHERE
          /* %JoinFKPK(inserted,Purchasing.ShipMethod) */
          inserted.ShipMethodID = Purchasing.ShipMethod.ShipMethodID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Purchasing.ShipMethod does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_2999 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.SalesOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b883", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesTerritory) */
          inserted.TerritoryID = Sales.SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.SalesTerritory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.Trigger_3006 ON Sales.SalesOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesOrderHeader  Sales.SalesOrderHeaderSalesReason on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017dc3", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeaderSalesReason,deleted," = "," AND") */
        Sales.SalesOrderHeaderSalesReason.SalesOrderID = deleted.SalesOrderID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesOrderHeader because Sales.SalesOrderHeaderSalesReason exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesOrderHeaderSalesReason ON Sales.SalesOrderHeaderSalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderHeaderSalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesOrderHeader  Sales.SalesOrderHeaderSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000368e1", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesOrderHeader," = "," AND") */
        deleted.SalesOrderID = Sales.SalesOrderHeader.SalesOrderID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeaderSalesReason
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeaderSalesReason,Sales.SalesOrderHeader," = "," AND") */
            Sales.SalesOrderHeaderSalesReason.SalesOrderID = Sales.SalesOrderHeader.SalesOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeaderSalesReason because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesReason  Sales.SalesOrderHeaderSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesReason"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesReason_Sales.Sal", FK_COLUMNS="SalesReasonID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesReason
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesReason," = "," AND") */
        deleted.SalesReasonID = Sales.SalesReason.SalesReasonID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesOrderHeaderSalesReason
          WHERE
            /* %JoinFKPK(Sales.SalesOrderHeaderSalesReason,Sales.SalesReason," = "," AND") */
            Sales.SalesOrderHeaderSalesReason.SalesReasonID = Sales.SalesReason.SalesReasonID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesOrderHeaderSalesReason because Sales.SalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesOrderHeaderSalesReason ON Sales.SalesOrderHeaderSalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeaderSalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int, 
           @insSalesReasonID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesOrderHeader  Sales.SalesOrderHeaderSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00034175", PARENT_OWNER="Sales", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesOrderHeader_Sale", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesOrderHeader
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesOrderHeader) */
          inserted.SalesOrderID = Sales.SalesOrderHeader.SalesOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeaderSalesReason because Sales.SalesOrderHeader does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesReason  Sales.SalesOrderHeaderSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesReason"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesReason_Sales.Sal", FK_COLUMNS="SalesReasonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesReasonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesReason
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesReason) */
          inserted.SalesReasonID = Sales.SalesReason.SalesReasonID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesOrderHeaderSalesReason because Sales.SalesReason does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesPerson ON Sales.SalesPerson FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesPerson */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.Store on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00081487", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sto", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Store
      WHERE
        /*  %JoinFKPK(Sales.Store,deleted," = "," AND") */
        Sales.Store.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesPerson because Sales.Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.SalesTerritoryHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(Sales.SalesTerritoryHistory,deleted," = "," AND") */
        Sales.SalesTerritoryHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesPerson because Sales.SalesTerritoryHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.SalesPersonQuotaHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesPersonQuotaHistory
      WHERE
        /*  %JoinFKPK(Sales.SalesPersonQuotaHistory,deleted," = "," AND") */
        Sales.SalesPersonQuotaHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesPerson because Sales.SalesPersonQuotaHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesPerson because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.SalesPerson on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesTerritory," = "," AND") */
        deleted.TerritoryID = Sales.SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesPerson
          WHERE
            /* %JoinFKPK(Sales.SalesPerson,Sales.SalesTerritory," = "," AND") */
            Sales.SalesPerson.TerritoryID = Sales.SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesPerson because Sales.SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* HumanResources.Employee  Sales.SalesPerson on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Sal", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,HumanResources.Employee
      WHERE
        /* %JoinFKPK(deleted,HumanResources.Employee," = "," AND") */
        deleted.BusinessEntityID = HumanResources.Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesPerson
          WHERE
            /* %JoinFKPK(Sales.SalesPerson,HumanResources.Employee," = "," AND") */
            Sales.SalesPerson.BusinessEntityID = HumanResources.Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesPerson because HumanResources.Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesPerson ON Sales.SalesPerson FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesPerson */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.Store on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0008cbd3", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sto", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Store
      WHERE
        /*  %JoinFKPK(Sales.Store,deleted," = "," AND") */
        Sales.Store.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesPerson because Sales.Store exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.SalesTerritoryHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(Sales.SalesTerritoryHistory,deleted," = "," AND") */
        Sales.SalesTerritoryHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesPerson because Sales.SalesTerritoryHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.SalesPersonQuotaHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesPersonQuotaHistory
      WHERE
        /*  %JoinFKPK(Sales.SalesPersonQuotaHistory,deleted," = "," AND") */
        Sales.SalesPersonQuotaHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesPerson because Sales.SalesPersonQuotaHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesPerson because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.SalesPerson on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesTerritory) */
          inserted.TerritoryID = Sales.SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesPerson because Sales.SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* HumanResources.Employee  Sales.SalesPerson on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="HumanResources", PARENT_TABLE="Employee"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Employee_Sal", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,HumanResources.Employee
        WHERE
          /* %JoinFKPK(inserted,HumanResources.Employee) */
          inserted.BusinessEntityID = HumanResources.Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesPerson because HumanResources.Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesPersonQuotaHistory ON Sales.SalesPersonQuotaHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesPersonQuotaHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.SalesPersonQuotaHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001b8a3", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesPerson," = "," AND") */
        deleted.BusinessEntityID = Sales.SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesPersonQuotaHistory
          WHERE
            /* %JoinFKPK(Sales.SalesPersonQuotaHistory,Sales.SalesPerson," = "," AND") */
            Sales.SalesPersonQuotaHistory.BusinessEntityID = Sales.SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesPersonQuotaHistory because Sales.SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesPersonQuotaHistory ON Sales.SalesPersonQuotaHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesPersonQuotaHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insQuotaDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.SalesPersonQuotaHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001ab8f", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesPerson
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesPerson) */
          inserted.BusinessEntityID = Sales.SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesPersonQuotaHistory because Sales.SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesReason ON Sales.SalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesReason  Sales.SalesOrderHeaderSalesReason on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000155f9", PARENT_OWNER="Sales", PARENT_TABLE="SalesReason"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesReason_Sales.Sal", FK_COLUMNS="SalesReasonID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeaderSalesReason,deleted," = "," AND") */
        Sales.SalesOrderHeaderSalesReason.SalesReasonID = deleted.SalesReasonID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesReason because Sales.SalesOrderHeaderSalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesReason ON Sales.SalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesReasonID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesReason  Sales.SalesOrderHeaderSalesReason on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017a7b", PARENT_OWNER="Sales", PARENT_TABLE="SalesReason"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesReason_Sales.Sal", FK_COLUMNS="SalesReasonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesReasonID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeaderSalesReason,deleted," = "," AND") */
        Sales.SalesOrderHeaderSalesReason.SalesReasonID = deleted.SalesReasonID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesReason because Sales.SalesOrderHeaderSalesReason exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesTaxRate ON Sales.SalesTaxRate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTaxRate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.StateProvince  Sales.SalesTaxRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001b1c8", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Sales.", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (SELECT * FROM deleted,Person.StateProvince
      WHERE
        /* %JoinFKPK(deleted,Person.StateProvince," = "," AND") */
        deleted.StateProvinceID = Person.StateProvince.StateProvinceID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesTaxRate
          WHERE
            /* %JoinFKPK(Sales.SalesTaxRate,Person.StateProvince," = "," AND") */
            Sales.SalesTaxRate.StateProvinceID = Person.StateProvince.StateProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesTaxRate because Person.StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesTaxRate ON Sales.SalesTaxRate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTaxRate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesTaxRateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.StateProvince  Sales.SalesTaxRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a65c", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Sales.", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.StateProvince
        WHERE
          /* %JoinFKPK(inserted,Person.StateProvince) */
          inserted.StateProvinceID = Person.StateProvince.StateProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesTaxRate because Person.StateProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesTerritory ON Sales.SalesTerritory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTerritory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Person.StateProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000786c2", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Person", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.StateProvince
      WHERE
        /*  %JoinFKPK(Person.StateProvince,deleted," = "," AND") */
        Person.StateProvince.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesTerritory because Person.StateProvince exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.SalesTerritoryHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(Sales.SalesTerritoryHistory,deleted," = "," AND") */
        Sales.SalesTerritoryHistory.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesTerritory because Sales.SalesTerritoryHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.SalesPerson on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /*  %JoinFKPK(Sales.SalesPerson,deleted," = "," AND") */
        Sales.SalesPerson.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesTerritory because Sales.SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesTerritory because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SalesTerritory because Sales.Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.CountryRegion  Sales.SalesTerritory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,Person.CountryRegion
      WHERE
        /* %JoinFKPK(deleted,Person.CountryRegion," = "," AND") */
        deleted.CountryRegionCode = Person.CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesTerritory
          WHERE
            /* %JoinFKPK(Sales.SalesTerritory,Person.CountryRegion," = "," AND") */
            Sales.SalesTerritory.CountryRegionCode = Person.CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesTerritory because Person.CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesTerritory ON Sales.SalesTerritory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTerritory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTerritoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Person.StateProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0008112c", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Person", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.StateProvince
      WHERE
        /*  %JoinFKPK(Person.StateProvince,deleted," = "," AND") */
        Person.StateProvince.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesTerritory because Person.StateProvince exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.SalesTerritoryHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(Sales.SalesTerritoryHistory,deleted," = "," AND") */
        Sales.SalesTerritoryHistory.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesTerritory because Sales.SalesTerritoryHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.SalesPerson on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /*  %JoinFKPK(Sales.SalesPerson,deleted," = "," AND") */
        Sales.SalesPerson.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesTerritory because Sales.SalesPerson exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesTerritory because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SalesTerritory because Sales.Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.CountryRegion  Sales.SalesTerritory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Sales.", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.CountryRegion
        WHERE
          /* %JoinFKPK(inserted,Person.CountryRegion) */
          inserted.CountryRegionCode = Person.CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesTerritory because Person.CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SalesTerritoryHistory ON Sales.SalesTerritoryHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTerritoryHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Sales.SalesTerritoryHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00034ac8", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesTerritory," = "," AND") */
        deleted.TerritoryID = Sales.SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesTerritoryHistory
          WHERE
            /* %JoinFKPK(Sales.SalesTerritoryHistory,Sales.SalesTerritory," = "," AND") */
            Sales.SalesTerritoryHistory.TerritoryID = Sales.SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesTerritoryHistory because Sales.SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.SalesTerritoryHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesPerson," = "," AND") */
        deleted.BusinessEntityID = Sales.SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.SalesTerritoryHistory
          WHERE
            /* %JoinFKPK(Sales.SalesTerritoryHistory,Sales.SalesPerson," = "," AND") */
            Sales.SalesTerritoryHistory.BusinessEntityID = Sales.SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SalesTerritoryHistory because Sales.SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SalesTerritoryHistory ON Sales.SalesTerritoryHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTerritoryHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insTerritoryID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Sales.SalesTerritoryHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00032d53", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Sales.", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesTerritory) */
          inserted.TerritoryID = Sales.SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesTerritoryHistory because Sales.SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.SalesTerritoryHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sal", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesPerson
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesPerson) */
          inserted.BusinessEntityID = Sales.SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SalesTerritoryHistory because Sales.SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ScrapReason ON Production.ScrapReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ScrapReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ScrapReason  Production.WorkOrder on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000146c6", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ScrapReason_Prod", FK_COLUMNS="ScrapReasonID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ScrapReasonID = deleted.ScrapReasonID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ScrapReason because Production.WorkOrder exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ScrapReason ON Production.ScrapReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ScrapReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insScrapReasonID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ScrapReason  Production.WorkOrder on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000165f4", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ScrapReason_Prod", FK_COLUMNS="ScrapReasonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ScrapReasonID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ScrapReasonID = deleted.ScrapReasonID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ScrapReason because Production.WorkOrder exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tD_Shift ON HumanResources.Shift FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Shift */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* HumanResources.Shift  HumanResources.EmployeeDepartmentHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000171fc", PARENT_OWNER="HumanResources", PARENT_TABLE="Shift"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Shift_HumanR", FK_COLUMNS="ShiftID" */
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeeDepartmentHistory,deleted," = "," AND") */
        HumanResources.EmployeeDepartmentHistory.ShiftID = deleted.ShiftID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete HumanResources.Shift because HumanResources.EmployeeDepartmentHistory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER HumanResources.tU_Shift ON HumanResources.Shift FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Shift */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShiftID tinyint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* HumanResources.Shift  HumanResources.EmployeeDepartmentHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000190cb", PARENT_OWNER="HumanResources", PARENT_TABLE="Shift"
    CHILD_OWNER="HumanResources", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_HumanResources.Shift_HumanR", FK_COLUMNS="ShiftID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShiftID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,HumanResources.EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(HumanResources.EmployeeDepartmentHistory,deleted," = "," AND") */
        HumanResources.EmployeeDepartmentHistory.ShiftID = deleted.ShiftID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update HumanResources.Shift because HumanResources.EmployeeDepartmentHistory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tD_ShipMethod ON Purchasing.ShipMethod FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ShipMethod */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.ShipMethod  Sales.SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002ad9e", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Sales", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.ShipMethod because Sales.SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Purch", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.ShipMethod because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_ShipMethod ON Purchasing.ShipMethod FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ShipMethod */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShipMethodID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.ShipMethod  Sales.SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002d7ce", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Sales", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderHeader
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderHeader,deleted," = "," AND") */
        Sales.SalesOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.ShipMethod because Sales.SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.ShipMethod_Purch", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.ShipMethod because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_ShoppingCartItem ON Sales.ShoppingCartItem FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ShoppingCartItem */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Sales.ShoppingCartItem on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001995d", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sh", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Sales.ShoppingCartItem
          WHERE
            /* %JoinFKPK(Sales.ShoppingCartItem,Production.Product," = "," AND") */
            Sales.ShoppingCartItem.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.ShoppingCartItem because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_ShoppingCartItem ON Sales.ShoppingCartItem FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ShoppingCartItem */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShoppingCartItemID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Sales.ShoppingCartItem on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001921b", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sh", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.ShoppingCartItem because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SpecialOffer ON Sales.SpecialOffer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SpecialOffer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SpecialOffer  Sales.SpecialOfferProduct on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001487e", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOffer_Sales.Sp", FK_COLUMNS="SpecialOfferID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(Sales.SpecialOfferProduct,deleted," = "," AND") */
        Sales.SpecialOfferProduct.SpecialOfferID = deleted.SpecialOfferID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SpecialOffer because Sales.SpecialOfferProduct exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SpecialOffer ON Sales.SpecialOffer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SpecialOffer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSpecialOfferID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SpecialOffer  Sales.SpecialOfferProduct on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001708b", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOffer_Sales.Sp", FK_COLUMNS="SpecialOfferID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SpecialOfferID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(Sales.SpecialOfferProduct,deleted," = "," AND") */
        Sales.SpecialOfferProduct.SpecialOfferID = deleted.SpecialOfferID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SpecialOffer because Sales.SpecialOfferProduct exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_SpecialOfferProduct ON Sales.SpecialOfferProduct FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SpecialOfferProduct */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.SpecialOfferProduct  Sales.SalesOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004b73d", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOfferProduct_S", FK_COLUMNS="SpecialOfferID""ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderDetail
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderDetail,deleted," = "," AND") */
        Sales.SalesOrderDetail.SpecialOfferID = deleted.SpecialOfferID AND
        Sales.SalesOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.SpecialOfferProduct because Sales.SalesOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SpecialOffer  Sales.SpecialOfferProduct on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOffer_Sales.Sp", FK_COLUMNS="SpecialOfferID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SpecialOffer
      WHERE
        /* %JoinFKPK(deleted,Sales.SpecialOffer," = "," AND") */
        deleted.SpecialOfferID = Sales.SpecialOffer.SpecialOfferID AND
        NOT EXISTS (
          SELECT * FROM Sales.SpecialOfferProduct
          WHERE
            /* %JoinFKPK(Sales.SpecialOfferProduct,Sales.SpecialOffer," = "," AND") */
            Sales.SpecialOfferProduct.SpecialOfferID = Sales.SpecialOffer.SpecialOfferID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SpecialOfferProduct because Sales.SpecialOffer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Sales.SpecialOfferProduct on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sp", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Sales.SpecialOfferProduct
          WHERE
            /* %JoinFKPK(Sales.SpecialOfferProduct,Production.Product," = "," AND") */
            Sales.SpecialOfferProduct.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.SpecialOfferProduct because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_SpecialOfferProduct ON Sales.SpecialOfferProduct FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SpecialOfferProduct */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSpecialOfferID int, 
           @insProductID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.SpecialOfferProduct  Sales.SalesOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0004b5ef", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOfferProduct_S", FK_COLUMNS="SpecialOfferID""ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SpecialOfferID) OR
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesOrderDetail
      WHERE
        /*  %JoinFKPK(Sales.SalesOrderDetail,deleted," = "," AND") */
        Sales.SalesOrderDetail.SpecialOfferID = deleted.SpecialOfferID AND
        Sales.SalesOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.SpecialOfferProduct because Sales.SalesOrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SpecialOffer  Sales.SpecialOfferProduct on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SpecialOffer_Sales.Sp", FK_COLUMNS="SpecialOfferID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SpecialOfferID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SpecialOffer
        WHERE
          /* %JoinFKPK(inserted,Sales.SpecialOffer) */
          inserted.SpecialOfferID = Sales.SpecialOffer.SpecialOfferID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SpecialOfferProduct because Sales.SpecialOffer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Sales.SpecialOfferProduct on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Sales", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Sales.Sp", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.SpecialOfferProduct because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tD_StateProvince ON Person.StateProvince FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on StateProvince */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.StateProvince  Sales.SalesTaxRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00056d36", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Sales.", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTaxRate
      WHERE
        /*  %JoinFKPK(Sales.SalesTaxRate,deleted," = "," AND") */
        Sales.SalesTaxRate.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.StateProvince because Sales.SalesTaxRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.StateProvince  Person.Address on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Person", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Person", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.Address
      WHERE
        /*  %JoinFKPK(Person.Address,deleted," = "," AND") */
        Person.Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.StateProvince because Person.Address exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesTerritory  Person.StateProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Person", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesTerritory," = "," AND") */
        deleted.TerritoryID = Sales.SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Person.StateProvince
          WHERE
            /* %JoinFKPK(Person.StateProvince,Sales.SalesTerritory," = "," AND") */
            Person.StateProvince.TerritoryID = Sales.SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.StateProvince because Sales.SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.CountryRegion  Person.StateProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Person", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,Person.CountryRegion
      WHERE
        /* %JoinFKPK(deleted,Person.CountryRegion," = "," AND") */
        deleted.CountryRegionCode = Person.CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM Person.StateProvince
          WHERE
            /* %JoinFKPK(Person.StateProvince,Person.CountryRegion," = "," AND") */
            Person.StateProvince.CountryRegionCode = Person.CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.StateProvince because Person.CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_StateProvince ON Person.StateProvince FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on StateProvince */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStateProvinceID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.StateProvince  Sales.SalesTaxRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0005a521", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Sales", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Sales.", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.SalesTaxRate
      WHERE
        /*  %JoinFKPK(Sales.SalesTaxRate,deleted," = "," AND") */
        Sales.SalesTaxRate.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.StateProvince because Sales.SalesTaxRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.StateProvince  Person.Address on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="StateProvince"
    CHILD_OWNER="Person", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.StateProvince_Person", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.Address
      WHERE
        /*  %JoinFKPK(Person.Address,deleted," = "," AND") */
        Person.Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.StateProvince because Person.Address exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesTerritory  Person.StateProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesTerritory_Person", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesTerritory) */
          inserted.TerritoryID = Sales.SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.StateProvince because Sales.SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.CountryRegion  Person.StateProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="Person", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.CountryRegion_Person", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.CountryRegion
        WHERE
          /* %JoinFKPK(inserted,Person.CountryRegion) */
          inserted.CountryRegionCode = Person.CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.StateProvince because Person.CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tD_Store ON Sales.Store FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Store */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Sales.Store  Sales.Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00041811", PARENT_OWNER="Sales", PARENT_TABLE="Store"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Store_Sales.Customer", FK_COLUMNS="StoreID" */
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.StoreID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Sales.Store because Sales.Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Sales.SalesPerson  Sales.Store on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sto", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (SELECT * FROM deleted,Sales.SalesPerson
      WHERE
        /* %JoinFKPK(deleted,Sales.SalesPerson," = "," AND") */
        deleted.SalesPersonID = Sales.SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.Store
          WHERE
            /* %JoinFKPK(Sales.Store,Sales.SalesPerson," = "," AND") */
            Sales.Store.SalesPersonID = Sales.SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Store because Sales.SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Sales.Store on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Sales", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,Person.BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Sales.Store
          WHERE
            /* %JoinFKPK(Sales.Store,Person.BusinessEntity," = "," AND") */
            Sales.Store.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Sales.Store because Person.BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Sales.tU_Store ON Sales.Store FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Store */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Sales.Store  Sales.Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00047386", PARENT_OWNER="Sales", PARENT_TABLE="Store"
    CHILD_OWNER="Sales", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.Store_Sales.Customer", FK_COLUMNS="StoreID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Sales.Customer
      WHERE
        /*  %JoinFKPK(Sales.Customer,deleted," = "," AND") */
        Sales.Customer.StoreID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Sales.Store because Sales.Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Sales.SalesPerson  Sales.Store on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Sales", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Sales.SalesPerson_Sales.Sto", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesPersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Sales.SalesPerson
        WHERE
          /* %JoinFKPK(inserted,Sales.SalesPerson) */
          inserted.SalesPersonID = Sales.SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SalesPersonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Store because Sales.SalesPerson does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Sales.Store on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Sales", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Sales", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,Person.BusinessEntity) */
          inserted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Sales.Store because Person.BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_TransactionHistory ON Production.TransactionHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on TransactionHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.TransactionHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001aa9e", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.TransactionHistory
          WHERE
            /* %JoinFKPK(Production.TransactionHistory,Production.Product," = "," AND") */
            Production.TransactionHistory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.TransactionHistory because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_TransactionHistory ON Production.TransactionHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on TransactionHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTransactionID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.TransactionHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a904", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.TransactionHistory because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_UnitMeasure ON Production.UnitMeasure FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on UnitMeasure */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Purchasing.ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00050d93", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Purc", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Purchasing.ProductVendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="WeightUnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.WeightUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="SizeUnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.SizeUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Production.BillOfMaterials exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_UnitMeasure ON Production.UnitMeasure FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on UnitMeasure */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insUnitMeasureCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Purchasing.ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00057edf", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Purc", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Purchasing.ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="WeightUnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.WeightUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="SizeUnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.SizeUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.UnitMeasure_Prod", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Production.BillOfMaterials exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [dVendor] ON Vendor
   WITH 
 EXECUTE AS CALLER  INSTEAD OF DELETE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @DeleteCount int;

        SELECT @DeleteCount = COUNT(*) FROM deleted;
        IF @DeleteCount > 0 
        BEGIN
            RAISERROR
                (N'Vendors cannot be deleted. They can only be marked as not active.', -- Message
                10, -- Severity.
                1); -- State.

        -- Rollback any active or uncommittable transactions
            IF @@TRANCOUNT > 0
            BEGIN
                ROLLBACK TRANSACTION;
            END
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [dVendor] ON Vendor
go

CREATE TRIGGER Purchasing.tU_Vendor ON Purchasing.Vendor FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Vendor */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0004645a", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="VendorID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.VendorID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.Vendor because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.Vendor because Purchasing.ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person.BusinessEntity  Purchasing.Vendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Purchasing", CHILD_TABLE="Vendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Purch", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,Person.BusinessEntity) */
          inserted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.Vendor because Person.BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_2966 ON Purchasing.Vendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Vendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015923", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.Vendor because Purchasing.ProductVendor exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_2977 ON Purchasing.Vendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Vendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001594a", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Purchasing.Vendor_Purchasin", FK_COLUMNS="VendorID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.VendorID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.Vendor because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_3026 ON Purchasing.Vendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Vendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.BusinessEntity  Purchasing.Vendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001b0df", PARENT_OWNER="Person", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="Purchasing", CHILD_TABLE="Vendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person.BusinessEntity_Purch", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,Person.BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.Vendor
          WHERE
            /* %JoinFKPK(Purchasing.Vendor,Person.BusinessEntity," = "," AND") */
            Purchasing.Vendor.BusinessEntityID = Person.BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.Vendor because Person.BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iWorkOrder] ON WorkOrder
   WITH 
 EXECUTE AS CALLER  AFTER INSERT 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory](
            [ProductID]
            ,[ReferenceOrderID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[WorkOrderID]
            ,'W'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,0
        FROM inserted;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iWorkOrder] ON WorkOrder
go

CREATE TRIGGER [uWorkOrder] ON WorkOrder
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty])
        BEGIN
            INSERT INTO [Production].[TransactionHistory](
                [ProductID]
                ,[ReferenceOrderID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity])
            SELECT 
                inserted.[ProductID]
                ,inserted.[WorkOrderID]
                ,'W'
                ,GETDATE()
                ,inserted.[OrderQty]
            FROM inserted;
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uWorkOrder] ON WorkOrder
go

CREATE TRIGGER Production.tD_WorkOrder ON Production.WorkOrder FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on WorkOrder */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.WorkOrder  Production.WorkOrderRouting on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00046513", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.WorkOrder_Produc", FK_COLUMNS="WorkOrderID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.WorkOrderID = deleted.WorkOrderID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.WorkOrder because Production.WorkOrderRouting exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ScrapReason  Production.WorkOrder on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ScrapReason_Prod", FK_COLUMNS="ScrapReasonID" */
    IF EXISTS (SELECT * FROM deleted,Production.ScrapReason
      WHERE
        /* %JoinFKPK(deleted,Production.ScrapReason," = "," AND") */
        deleted.ScrapReasonID = Production.ScrapReason.ScrapReasonID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrder
          WHERE
            /* %JoinFKPK(Production.WorkOrder,Production.ScrapReason," = "," AND") */
            Production.WorkOrder.ScrapReasonID = Production.ScrapReason.ScrapReasonID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrder because Production.ScrapReason exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.WorkOrder on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrder
          WHERE
            /* %JoinFKPK(Production.WorkOrder,Production.Product," = "," AND") */
            Production.WorkOrder.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrder because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_WorkOrder ON Production.WorkOrder FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrder */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.WorkOrder on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019d30", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Product_Producti", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrder because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.Trigger_3033 ON Production.WorkOrder FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrder */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ScrapReason  Production.WorkOrder on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001d0d6", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.ScrapReason_Prod", FK_COLUMNS="ScrapReasonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ScrapReasonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ScrapReason
        WHERE
          /* %JoinFKPK(inserted,Production.ScrapReason) */
          inserted.ScrapReasonID = Production.ScrapReason.ScrapReasonID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ScrapReasonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrder because Production.ScrapReason does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.Trigger_3038 ON Production.WorkOrder FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrder */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.WorkOrder  Production.WorkOrderRouting on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017344", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.WorkOrder_Produc", FK_COLUMNS="WorkOrderID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(WorkOrderID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.WorkOrderID = deleted.WorkOrderID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.WorkOrder because Production.WorkOrderRouting exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_WorkOrderRouting ON Production.WorkOrderRouting FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on WorkOrderRouting */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.WorkOrder  Production.WorkOrderRouting on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00033bab", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.WorkOrder_Produc", FK_COLUMNS="WorkOrderID" */
    IF EXISTS (SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /* %JoinFKPK(deleted,Production.WorkOrder," = "," AND") */
        deleted.WorkOrderID = Production.WorkOrder.WorkOrderID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrderRouting
          WHERE
            /* %JoinFKPK(Production.WorkOrderRouting,Production.WorkOrder," = "," AND") */
            Production.WorkOrderRouting.WorkOrderID = Production.WorkOrder.WorkOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrderRouting because Production.WorkOrder exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Location  Production.WorkOrderRouting on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
    IF EXISTS (SELECT * FROM deleted,Production.Location
      WHERE
        /* %JoinFKPK(deleted,Production.Location," = "," AND") */
        deleted.LocationID = Production.Location.LocationID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrderRouting
          WHERE
            /* %JoinFKPK(Production.WorkOrderRouting,Production.Location," = "," AND") */
            Production.WorkOrderRouting.LocationID = Production.Location.LocationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrderRouting because Production.Location exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_WorkOrderRouting ON Production.WorkOrderRouting FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrderRouting */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int, 
           @insProductID int, 
           @insOperationSequence smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.WorkOrder  Production.WorkOrderRouting on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00033624", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.WorkOrder_Produc", FK_COLUMNS="WorkOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(WorkOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.WorkOrder
        WHERE
          /* %JoinFKPK(inserted,Production.WorkOrder) */
          inserted.WorkOrderID = Production.WorkOrder.WorkOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrderRouting because Production.WorkOrder does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Location  Production.WorkOrderRouting on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Production.Location_Product", FK_COLUMNS="LocationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Location
        WHERE
          /* %JoinFKPK(inserted,Production.Location) */
          inserted.LocationID = Production.Location.LocationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrderRouting because Production.Location does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go



